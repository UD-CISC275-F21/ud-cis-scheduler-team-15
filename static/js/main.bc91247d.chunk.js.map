{"version":3,"sources":["components/Welcome.tsx","components/ChangeData.tsx","components/CourseViewer.tsx","components/SemesterTable.tsx","components/PlanViewer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Welcome","visible","setVisible","Modal","show","onHide","Header","closeButton","Title","Body","ChangeData","course","setCourse","hide","className","id","type","defaultValue","number","name","credits","onClick","numberHTML","document","getElementById","nameHTML","creditsHTML","value","Number","update","CourseViewer","key","index","sem_index","plan","setPlan","useState","display","dotsStyle","setDotsStyle","changePromptVis","setChangePromptVis","onMouseEnter","onMouseLeave","courses","style","c","temp_sem","temp_plan","SemesterTable","year","semester","Table","striped","bordered","map","PlanViewer","s","length","App","COURSES","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bc91247d.chunk.js","sourcesContent":["import React from \"react\";\nimport {Modal} from \"react-bootstrap\";\nexport function Welcome({visible, setVisible}: {visible: boolean, setVisible: (b: boolean) => void}): JSX.Element {\n    const hide = () => setVisible(false);\n    \n    return (\n        <Modal show={visible} onHide = {hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Welcome!</Modal.Title>\n            </Modal.Header>\n      \n            <Modal.Body>\n                <p>This web app is designed to help you plan out your course schedule in order to complete your CIS Schedule.</p>\n            </Modal.Body>\n        </Modal>\n    );\n}","\nimport React from \"react\";\nimport {Modal} from \"react-bootstrap\";\nimport { Course } from \"../interfaces/course\";\nexport function ChangeData({course, setCourse, visible, setVisible}:\n    {course: Course;\n    setCourse: (course: Course)=>void;\n    visible: boolean;\n    setVisible: (visible: boolean)=>void;\n    }): JSX.Element{\n\n    const hide = () => setVisible(false);\n\n    function update():void{\n        const numberHTML = document.getElementById(\"numberUpdate\") as HTMLInputElement;\n        const nameHTML  = document.getElementById(\"nameUpdate\") as HTMLInputElement;\n        const creditsHTML = document.getElementById(\"creditsUpdate\") as HTMLInputElement;\n        setCourse({number:numberHTML.value, name: nameHTML.value, credits: Number(creditsHTML.value)});\n        hide();\n    }\n    return(\n        <Modal show={visible} onHide = {hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Course Info</Modal.Title>\n            </Modal.Header>\n    \n            <Modal.Body>\n                <div className=\"dataEditorLabel\">\n                    <strong>Edit Course Number:</strong>\n                    <input className=\"dataInput\" id=\"numberUpdate\" type=\"text\" defaultValue={course.number}></input>\n                </div>\n                <div className=\"dataEditorLabel\">\n                    <strong>Edit Course Name:</strong>\n                    <input className=\"dataInput\" id=\"nameUpdate\" defaultValue={course.name}></input>\n                </div>\n                <div className=\"dataEditorLabel\">\n                    <strong>Edit Credits:</strong>\n                    <div>\n                        <input className=\"dataInputCred\" id=\"creditsUpdate\" type=\"number\" defaultValue={course.credits}></input>\n                    </div>\n                </div>\n                <button className=\"saveChanges\" onClick={() => update()}>Save Changes</button>\n            </Modal.Body>\n        </Modal>\n    );     \n}","import React, { useState } from \"react\";\nimport { Course } from \"../interfaces/course\";\nimport { Semester } from \"../interfaces/semester\";\nimport { ChangeData } from \"./ChangeData\";\n\nexport function CourseViewer({key, index, sem_index, plan, setPlan}: \n    {key: number\n    index: number;\n    sem_index: number;\n    plan: Semester[];\n    setPlan: (plan: Semester[])=> void;\n    }\n    \n): JSX.Element {\n    const [dotsStyle, setDotsStyle] = useState({display: \"none\"});\n    const [changePromptVis, setChangePromptVis] = useState<boolean>(false);\n\n    function setCourse(c: Course):void{\n        const temp_sem: Semester = plan[sem_index];\n        plan[sem_index].courses[index] = c;\n        const temp_plan: Semester[] = plan;\n        temp_plan[sem_index] = temp_sem;\n        setPlan(temp_plan);\n    }\n    \n    return (\n        <tr key={key}\n        // Citation: https://stackoverflow.com/questions/61126014/how-to-show-button-while-hover-over-box-using-react\n            onMouseEnter={() => {\n                setDotsStyle({display: \"block\"});\n            }}\n            onMouseLeave={() => {\n                setDotsStyle({display: \"none\"});\n            }}>\n            <td className=\"courseNum\">{plan[sem_index].courses[index].number}</td>\n            <td className=\"courseName\">{plan[sem_index].courses[index].name}</td>\n            <td className = \"split\">\n                <div className = \"credits\">{plan[sem_index].courses[index].credits}</div>\n                <button className = \"dotButton\" style = {dotsStyle} onClick = {()=>setChangePromptVis(true)}>\n                    <div className = \"dot\"></div>\n                    <div className = \"dot\"></div>\n                    <div className = \"dot\"></div>\n                </button>\n            </td>\n            <ChangeData course={plan[sem_index].courses[index]} setCourse={setCourse} visible={changePromptVis} setVisible={setChangePromptVis}></ChangeData>\n        </tr>\n    );\n}","import { Table } from \"react-bootstrap\";\nimport { Course } from \"../interfaces/course\";\nimport { Semester } from \"../interfaces/semester\";\nimport { CourseViewer } from \"./CourseViewer\";\nimport React from \"react\";\n\nexport function SemesterTable({sem_index, plan, setPlan}:\n    {sem_index: number;\n    plan: Semester[];\n    setPlan: (plan: Semester[])=>void}):\n    JSX.Element{\n    return (\n        <div className = \"SemesterTable\">\n            <table className=\"SemesterHeader\">\n                <td className=\"yearLabel\">\n                    <strong>{plan[sem_index].year}</strong>\n                </td>\n                <td className=\"semLabel\">\n                    <strong>{plan[sem_index].semester}</strong>\n                </td>\n            </table>\n            <Table striped={true} bordered>\n                <thead>\n                    <tr>\n                        <th>\n                            Course Number\n                        </th>\n                        <th>\n                            Course Name\n                        </th>\n                        <th>\n                            Credits\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {plan[sem_index].courses.map((c:Course, index:number) => { \n                        return (\n                            <CourseViewer key={index} index={index} sem_index={sem_index} plan={plan} setPlan={setPlan}></CourseViewer>\n                        );\n                    }\n                    )}\n                </tbody>\n            </Table>\n        </div>\n    );\n}","import { Semester } from \"../interfaces/semester\";\nimport { SemesterTable } from \"./SemesterTable\";\nimport React from \"react\";\n\nexport function PlanViewer({plan, setPlan}:\n    {plan: Semester[];\n    setPlan: (plan: Semester[])=>void}\n):JSX.Element{\n    \n    return(\n        <div>\n            {plan.map((s:Semester, index:number) =>{\n                if(index%2 === 0 && index!=plan.length-1){\n                    return(\n                        <div className=\"YearTable\" key={index}>\n                            <table className=\"YearTable\">\n                                <tr>\n                                    <td className=\"Fall\">\n                                        <SemesterTable sem_index={index} plan={plan} setPlan={setPlan}></SemesterTable>\n                                    </td>\n                                    <td className=\"Spring\">\n                                        <SemesterTable sem_index={index+1} plan={plan} setPlan={setPlan}></SemesterTable>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    );\n                }\n                if(index%2 === 0 && index===plan.length-1){\n                    return(\n                        <div className=\"YearTable\" key={index}>\n                            <table className=\"YearTable\">\n                                <tr>\n                                    <td className=\"Fall\">\n                                        <SemesterTable sem_index={index} plan={plan} setPlan={setPlan}></SemesterTable>\n                                    </td>\n                                    <td className=\"Spring\">\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    );\n                }\n            })}\n        </div>\n    );\n}","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport COURSES from \"./assets/courses.json\";\nimport { Semester } from \"./interfaces/semester\";\nimport {Welcome} from \"./components/Welcome\";\nimport { PlanViewer } from \"./components/PlanViewer\";\n\nfunction App(): JSX.Element {\n    const [plan, setPlan] = useState<Semester[]>(COURSES as Semester[]);\n    const [visible, setVisible] = useState<boolean>(true);\n\n    return (\n        <div className=\"App\">\n            <p>UD CIS Scheduler</p>\n            <PlanViewer plan={plan} setPlan={setPlan}></PlanViewer>\n            <Welcome visible = {visible} setVisible = {setVisible}></Welcome>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}