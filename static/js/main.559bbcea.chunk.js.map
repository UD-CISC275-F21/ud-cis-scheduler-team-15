{"version":3,"sources":["components/Welcome.tsx","components/ChangeData.tsx","components/CourseViewer.tsx","components/SemesterMenu.tsx","components/SemesterTable.tsx","components/PlanViewer.tsx","interfaces/semester.ts","components/AuditTable.tsx","components/AuditModal.tsx","components/ControlPanel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Welcome","visible","setVisible","Modal","show","onHide","Header","closeButton","Title","Body","ChangeData","index","sem_index","plan","setPlan","setRenderSemester","useState","courses","number","courseNumber","setCourseNumber","name","courseName","setCourseName","credits","courseCredits","setCourseCredits","hide","update","c","temp_sem","temp_plan","setCourse","className","id","type","defaultValue","onChange","e","target","value","parseInt","onClick","temp_courses","splice","del","CourseViewer","display","dotsStyle","setDotsStyle","changePromptVis","setChangePromptVis","renderCourse","setRenderCourse","onMouseEnter","onMouseLeave","style","SemesterMenu","semMenuVis","setSemMenuVis","clearSemester","map","s","deleteSemester","filter","setPlanViewer","year","Col","Button","variant","disabled","SemesterTable","renderSemester","semester","Table","striped","bordered","PlanViewer","length","YearType","SemesterType","AuditTable","AuditModal","missingCore","setMissingCore","CISCelectives","setCISCelectives","breadth","setBreadth","reqCourses","RequiredCourses","prereqs","CISCprereqs","rules_violated","set_rules_violated","missing_prereqs","set_missing_prereqs","allCourses","i","j","push","plan_nums","sem_nums","isIn","nums","checkRules","setCheckRules","temp_missing","checkCore","temp_CISCelectives","startsWith","checkCISCElec","temp_breadth","ArtsHumanities","HistoryCultural","SocialBehavioral","Tech","temp_additional","isInAll","COEupper","used_lower","upper","slice","checkBreadths","rules_violated_temp","each_prereq","semester_course_occurs","course","k","missing_prereqs_temp","checkPrereqs","size","p","index0","req","index1","ControlPanel","setAuditVis","useEffect","sessionStorage","getItem","json","savedPlan","JSON","parse","stringify","setItem","yearType","FirstYear","semesterType","Fall","Spring","SecondYear","ThirdYear","FourthYear","FifthYear","console","log","newSemester","csvContent","q","hiddenElement","document","createElement","href","encodeURI","download","click","App","COURSES","auditVis","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.559bbcea.chunk.js","sourcesContent":["import React from \"react\";\nimport {Modal} from \"react-bootstrap\";\nexport function Welcome({visible, setVisible}: {visible: boolean, setVisible: (b: boolean) => void}): JSX.Element {\n    const hide = () => setVisible(false);\n    \n    return (\n        <Modal show={visible} onHide = {hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Welcome!</Modal.Title>\n            </Modal.Header>\n      \n            <Modal.Body>\n                <p>This web app is designed to help you plan out your course schedule in order to complete your CIS Schedule.</p>\n            </Modal.Body>\n        </Modal>\n    );\n}","import React, { useState } from \"react\";\nimport {Modal} from \"react-bootstrap\";\n//import ReactDOM, { render } from \"react-dom\";\n//import App from \"../App\";\nimport { Course } from \"../interfaces/course\";\nimport { Semester } from \"../interfaces/semester\";\n\nexport function ChangeData({index, sem_index, plan, setPlan, visible, setVisible, setRenderSemester}:\n    {index: number;\n    sem_index:number;\n    plan: Semester[];\n    setPlan: (plan: Semester[])=>void;\n    visible: boolean;\n    setVisible: (visible: boolean)=>void;\n    setRenderSemester: (renderSemester: boolean)=>void;\n    }): JSX.Element{\n\n    const [courseNumber, setCourseNumber] = useState<string>(plan[sem_index].courses[index].number);\n    const [courseName, setCourseName] = useState<string>(plan[sem_index].courses[index].name);\n    const [courseCredits, setCourseCredits] = useState<number>(plan[sem_index].courses[index].credits);\n\n    function setCourse(c: Course):void{\n        const temp_sem: Semester = plan[sem_index];\n        plan[sem_index].courses[index] = c;\n        const temp_plan: Semester[] = [...plan];\n        temp_plan[sem_index] = temp_sem;\n        setPlan(temp_plan);\n    }\n\n    const hide = () => setVisible(false);\n\n    function update():void{\n        setCourse({number: courseNumber, name: courseName, credits: courseCredits});\n        hide();\n    }\n\n    function del():void{\n        const temp_courses: Course[]= plan[sem_index].courses;\n        temp_courses.splice(index,1);\n        const temp_sem: Semester = plan[sem_index];\n        temp_sem.courses = temp_courses;\n        const temp_plan = plan;\n        temp_plan[sem_index] = temp_sem;\n        setPlan(temp_plan);    \n        hide();\n        setRenderSemester(true);\n        //Rerender everything!!\n        /*ReactDOM.render(\n            <React.StrictMode>\n                <App />\n            </React.StrictMode>,\n            document.getElementById(\"root\")\n        );\n        */\n    }\n\n    return(\n        <Modal show={visible} onHide = {hide} data-testid=\"changeData\">\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Course Info</Modal.Title>\n            </Modal.Header>\n    \n            <Modal.Body>\n                <div className=\"dataEditorLabel\">\n                    <strong>Edit Course Number:</strong>\n                    <input className=\"dataInput\" id=\"numberUpdate\" data-testid=\"numberUpdate\" type=\"text\" defaultValue={plan[sem_index].courses[index].number} onChange={(e) => setCourseNumber(e.target.value)}></input>\n                </div>\n                <div className=\"dataEditorLabel\">\n                    <strong>Edit Course Name:</strong>\n                    <input className=\"dataInput\" id=\"nameUpdate\" data-testid=\"nameUpdate\" defaultValue={plan[sem_index].courses[index].name} onChange={(e) => setCourseName(e.target.value)}></input>\n                </div>\n                <div className=\"dataEditorLabel\">\n                    <strong>Edit Credits:</strong>\n                    <div>\n                        {/* credit:\n                        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n                        https://github.com/UD-CISC275-F21/ta-trainer/blob/e7e3538c946ac04cd9a6b225ef2b93270ecf32af/src/components/AddCardModal.tsx\n                        */}\n                        <input className=\"dataInputCred\" id=\"creditsUpdate\" data-testid=\"creditsUpdate\" type=\"number\" defaultValue={plan[sem_index].courses[index].credits} onChange={(e) => setCourseCredits(parseInt(e.target.value))}></input>\n                    </div>\n                </div>\n                <button className=\"saveChanges\" data-testid = \"saveCourseChanges\" onClick={() => update()}>Save Changes</button>\n                <button className=\"deleteCourse\" onClick={() => del()}>Delete Course</button>\n            </Modal.Body>\n        </Modal>\n    );     \n}","import React, { useState } from \"react\";\nimport { Semester } from \"../interfaces/semester\";\nimport { ChangeData } from \"./ChangeData\";\n\nexport function CourseViewer({index, sem_index, plan, setPlan, setRenderSemester}: \n    {index: number;\n    sem_index: number;\n    plan: Semester[];\n    setPlan: (plan: Semester[])=> void;\n    setRenderSemester: (renderSemester: boolean)=>void;\n    }\n    \n): JSX.Element {\n    const [dotsStyle, setDotsStyle] = useState({display: \"none\"});\n    const [changePromptVis, setChangePromptVis] = useState<boolean>(false);\n    const [renderCourse, setRenderCourse] = useState<boolean>(false);\n\n    if (renderCourse){\n        setRenderSemester(true);\n        setRenderCourse(false);\n    }\n    if (plan[sem_index].courses[index]){\n        return (\n            <>\n                <td className=\"courseNum\" aria-label=\"Course Number\"\n                    onMouseEnter={() => {\n                        setDotsStyle({display: \"block\"});\n                    }}\n                    onMouseLeave={() => {\n                        setDotsStyle({display: \"none\"});\n                    }}>{\n                        plan[sem_index].courses[index].number\n                    }\n                </td>\n                <td className=\"courseName\" aria-label=\"Course Name\"\n                    onMouseEnter={() => {\n                        setDotsStyle({display: \"block\"});\n                    }}\n                    onMouseLeave={() => {\n                        setDotsStyle({display: \"none\"});\n                    }}>{\n                        plan[sem_index].courses[index].name\n                    }\n                </td>\n                <td className = \"split\" aria-label=\"Credits\"\n                    // Citation: https://stackoverflow.com/questions/61126014/how-to-show-button-while-hover-over-box-using-react\n                    onMouseEnter={() => {\n                        setDotsStyle({display: \"block\"});\n                    }}\n                    onMouseLeave={() => {\n                        setDotsStyle({display: \"none\"});\n                    }}>\n                    <div className = \"credits\">{plan[sem_index].courses[index].credits}</div>\n                    <button className = \"dotButton\" data-testid = \"dots\" style = {dotsStyle} onClick = {()=>setChangePromptVis(true)}>\n                        <div className = \"dot\"></div>\n                        <div className = \"dot\"></div>\n                        <div className = \"dot\"></div>\n                    </button>\n                </td>\n                <ChangeData index={index} sem_index={sem_index} plan={plan} setPlan={setPlan} visible={changePromptVis} setVisible={setChangePromptVis} setRenderSemester={setRenderCourse}></ChangeData>\n            </>\n        );\n    }else{\n        return(\n            <></>\n        );\n    }\n}","import React from \"react\";\nimport { Semester } from \"../interfaces/semester\";\nimport { Modal, Col } from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\n/*import { updateLanguageServiceSourceFile } from \"typescript\";*/\n\nexport function SemesterMenu({sem_index, plan, setPlan, semMenuVis, setSemMenuVis}:\n    {sem_index: number;\n    plan: Semester[],\n    setPlan: (plan: Semester[])=>void,\n    semMenuVis: boolean,\n    setSemMenuVis: (semMenuVis: boolean)=>void}\n):JSX.Element{\n\n\n    const hide = () => setSemMenuVis(false);\n\n    // clears a semester's courses by replacing it with an empty semester\n    function clearSemester():void{\n        setPlan(plan.map((s:Semester) => {\n            if (s === plan[sem_index]) {\n                return {...s, courses: []};\n            } else {\n                return {...s};\n            }\n        }));\n        setSemMenuVis(false);\n    }\n\n    // deletes a semester by filtering it out of the plan\n    function deleteSemester():void{\n        setPlan(plan.filter(s => s != plan[sem_index]));\n        setSemMenuVis(false);\n    }\n\n    // makes a copy of the old plan but with a new course in the selected semester\n    function setPlanViewer():void{\n        setPlan(plan.map((s:Semester) => {\n            if (s === plan[sem_index]) {\n                return {...s, courses: [...plan[sem_index].courses, {number: \"\", name: \"\", credits: 0}]};\n            } else {\n                return {...s};\n            }\n        }));\n        setSemMenuVis(false);\n    }\n\n    // render the semester menu\n    if ((plan[sem_index].year === \"Pool of Courses\") || (plan[sem_index].year === \"Pool of Courses\")) {\n        return(\n            <Modal show={semMenuVis} onHide = {hide}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add Course to Semester</Modal.Title>\n                </Modal.Header>\n    \n                <Modal.Body>\n                    <Col>\n                        <Button variant=\"success\" onClick={() => setPlanViewer()}>Add a course</Button>\n                    </Col>\n                    <Col>\n                        <Button variant=\"danger\" onClick={() => clearSemester()}>Delete all courses from semester</Button>\n                    </Col>\n                    <Col>\n                        <Button disabled variant=\"danger\" onClick={() => deleteSemester()}>Delete semester</Button>\n                    </Col>\n                </Modal.Body>\n            </Modal>\n        );\n    } else {\n        return(\n            <Modal show={semMenuVis} onHide = {hide}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add Course to Semester</Modal.Title>\n                </Modal.Header>\n    \n                <Modal.Body>\n                    <Col>\n                        <Button variant=\"success\" onClick={() => setPlanViewer()}>Add a course</Button>\n                    </Col>\n                    <Col>\n                        <Button variant=\"danger\" onClick={() => clearSemester()}>Delete all courses from semester</Button>\n                    </Col>\n                    <Col>\n                        <Button variant=\"danger\" onClick={() => deleteSemester()}>Delete semester</Button>\n                    </Col>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","import { Table } from \"react-bootstrap\";\nimport { Course } from \"../interfaces/course\";\nimport { Semester } from \"../interfaces/semester\";\nimport { CourseViewer } from \"./CourseViewer\";\nimport React, { useState } from \"react\";\nimport { SemesterMenu } from \"./SemesterMenu\";\n\nexport function SemesterTable({sem_index, plan, setPlan}:\n    {sem_index: number;\n    plan: Semester[];\n    setPlan: (plan: Semester[])=>void}):\n    JSX.Element{\n\n    const [dotsStyle, setDotsStyle] = useState({display: \"none\"});\n    const [changePromptVis, setChangePromptVis] = useState<boolean>(false);\n    const [renderSemester, setRenderSemester] = useState<boolean>(false);\n\n    if (renderSemester){\n        setRenderSemester(false);\n    }\n\n    if ((plan[sem_index].year === \"Pool of Courses\") || (plan[sem_index].semester === \"Pool of Courses\")) {\n        return (\n            <div className = \"SemesterTable\">\n                <table data-testid=\"Header\"// Citation: https://stackoverflow.com/questions/61126014/how-to-show-button-while-hover-over-box-using-react\n                    onMouseEnter={() => {\n                        setDotsStyle({display: \"block\"});\n                    }}\n                    onMouseLeave={() => {\n                        setDotsStyle({display: \"none\"});\n                    }} className=\"SemesterHeader\">\n                    <tbody>\n                        <tr>\n                            <td className = \"split\">\n                                <strong className=\"poolLabel\">{plan[sem_index].semester}</strong>\n                                <button aria-label = \"Sem Menu Dots\" className = \"dotButton\" style = {dotsStyle} onClick = {()=>setChangePromptVis(true)}>\n                                    <div className = \"dot\"></div>\n                                    <div className = \"dot\"></div>\n                                    <div className = \"dot\"></div>\n                                </button>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <SemesterMenu sem_index={sem_index} plan={plan} setPlan={setPlan} semMenuVis={changePromptVis} setSemMenuVis={setChangePromptVis}></SemesterMenu>\n    \n                <Table striped={true} bordered>\n                    <thead>\n                        <tr>\n                            <th>\n                                Course Number\n                            </th>\n                            <th>\n                                Course Name\n                            </th>\n                            <th>\n                                Credits\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {plan[sem_index].courses.map((c:Course, index:number) => { \n                            return (\n                                <tr key={index} aria-label=\"Course Viewer\">\n                                    <CourseViewer index={index} sem_index={sem_index} plan={plan} setPlan={setPlan} setRenderSemester={setRenderSemester}></CourseViewer>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    } else {\n        return (\n            <div className = \"SemesterTable\">\n                <table data-testid=\"Header\"// Citation: https://stackoverflow.com/questions/61126014/how-to-show-button-while-hover-over-box-using-react\n                    onMouseEnter={() => {\n                        setDotsStyle({display: \"block\"});\n                    }}\n                    onMouseLeave={() => {\n                        setDotsStyle({display: \"none\"});\n                    }} className=\"SemesterHeader\">\n                    <tbody>\n                        <tr>\n                            <td className=\"yearLabel\">\n                                <strong>{plan[sem_index].year}</strong>\n                            </td>\n                            <td className = \"split\">\n                                <strong className=\"semLabel\">{plan[sem_index].semester}</strong>\n                                <button aria-label = \"Sem Menu Dots\" className = \"dotButton\" style = {dotsStyle} onClick = {()=>setChangePromptVis(true)}>\n                                    <div className = \"dot\"></div>\n                                    <div className = \"dot\"></div>\n                                    <div className = \"dot\"></div>\n                                </button>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <SemesterMenu sem_index={sem_index} plan={plan} setPlan={setPlan} semMenuVis={changePromptVis} setSemMenuVis={setChangePromptVis}></SemesterMenu>\n    \n                <Table striped={true} bordered>\n                    <thead>\n                        <tr>\n                            <th>\n                                Course Number\n                            </th>\n                            <th>\n                                Course Name\n                            </th>\n                            <th>\n                                Credits\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {plan[sem_index].courses.map((c:Course, index:number) => { \n                            return (\n                                <tr key={index} aria-label=\"Course Viewer\">\n                                    <CourseViewer index={index} sem_index={sem_index} plan={plan} setPlan={setPlan} setRenderSemester={setRenderSemester}></CourseViewer>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}","import { Semester } from \"../interfaces/semester\";\nimport { SemesterTable } from \"./SemesterTable\";\nimport React from \"react\";\n\nexport function PlanViewer({plan, setPlan}:\n    {plan: Semester[];\n    setPlan: (plan: Semester[])=>void}\n):JSX.Element{\n    \n    return(\n        <div>\n            {plan.map((s:Semester, index:number) =>{\n                if(index%2 === 0 && index!=plan.length-1){\n                    return(\n                        <div className=\"YearTable\" key={index}>\n                            <table className=\"YearTable\">\n                                <tbody>\n                                    <tr>\n                                        <td className=\"Fall\" aria-label=\"Semester Table\">\n                                            <SemesterTable sem_index={index} plan={plan} setPlan={setPlan}></SemesterTable>\n                                        </td>\n                                        <td className=\"Spring\" aria-label=\"Semester Table\">\n                                            <SemesterTable sem_index={index+1} plan={plan} setPlan={setPlan}></SemesterTable>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    );\n                }\n                if(index%2 === 0 && index===plan.length-1){\n                    return(\n                        <div className=\"YearTable\" key={index}>\n                            <table className=\"YearTable\">\n                                <tbody>\n                                    <tr>\n                                        <td className=\"Fall\" aria-label=\"Semester Table\">\n                                            <SemesterTable sem_index={index} plan={plan} setPlan={setPlan}></SemesterTable>\n                                        </td>\n                                        <td className=\"Spring\" aria-label=\"Semester Table\">\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    );\n                }\n            })}\n        </div>\n    );\n}","import { Course } from \"./course\";\n\nexport enum YearType {\n    FirstYear = \"First Year\",\n    SecondYear = \"Second Year\",\n    ThirdYear = \"Third Year\",\n    FourthYear = \"Fourth Year\",\n    FifthYear = \"Fifth Year\",\n    PoolOfCourses = \"Pool of Courses\"\n}\n\nexport enum SemesterType {\n    Fall = \"Fall\",\n    Spring = \"Spring\",\n    PoolOfCourses = \"Pool of Courses\"\n}\n\nexport interface Semester {\n    year: YearType\n    semester: SemesterType\n    courses: Course[]\n}","import React from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { Course } from \"../interfaces/course\";\n\nexport function AuditTable({courses}:\n    {courses: Course[]}): JSX.Element{\n    return(\n        <Table className=\"AuditTable\" striped={true} bordered>\n            <thead>\n                <tr>\n                    <th className=\"text-center\">\n                        Course Number\n                    </th>\n                    <th className=\"text-center\">\n                        Course Name\n                    </th>\n                    <th className=\"text-center\">\n                        Credits\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                {courses?\n                    courses.map((c:Course, index:number) => { \n                        return (\n                            <tr key={index}>\n                                <td className=\"text-center\">{c.number}</td>\n                                <td className=\"text-center\">{c.name}</td>\n                                <td className=\"text-center\">{c.credits}</td>\n                            </tr>\n                        );\n                    }\n                    ):<div></div>}\n            </tbody>\n        </Table>\n    );\n}","import React, { useState } from \"react\";\nimport {Modal, Table} from \"react-bootstrap\";\nimport { Semester } from \"../interfaces/semester\";\nimport RequiredCourses from \"../assets/RequiredCoreCourses.json\";\nimport { Course } from \"../interfaces/course\";\nimport ArtsHumanities from \"../assets/ArtsHumanities.json\";\nimport HistoryCultural from \"../assets/HistoryCultural.json\";\nimport SocialBehavioral from \"../assets/SocialBehavioral.json\";\nimport Tech from \"../assets/Tech.json\";\nimport COEupper from \"../assets/COEupper.json\";\nimport CISCprereqs from \"../assets/CISCprereqs.json\";\nimport { Prereq } from \"../interfaces/prereq\";\nimport {AuditTable} from \"./AuditTable\";\n\nexport function AuditModal({plan, visible, setVisible}:\n    {plan: Semester[];\n    visible: boolean;\n    setVisible: (visible: boolean)=>void\n    }): JSX.Element{\n    const hide = () => setVisible(false);\n\n    //Missing Core Courses\n    const [missingCore, setMissingCore] = useState<Course[]>([]);\n\n    //CISC electives\n    const [CISCelectives, setCISCelectives] = useState<Course[]>([]);\n\n    //Breadth electives\n    const [breadth, setBreadth] = useState<Course[]>([]);\n\n    //Get require courses for checking\n    const reqCourses: Course[] = RequiredCourses as Course[];\n\n    //Prerequisite rules\n    const prereqs: Prereq[] = CISCprereqs as Prereq[];\n    const [rules_violated, set_rules_violated] = useState<boolean[][]>([]);\n    const [missing_prereqs, set_missing_prereqs] = useState<boolean>(false);\n    \n    //Raw list of all courses (will be helpful for some checks)\n    const allCourses: Course[] = [];\n    for (let i = 0; i<plan.length; i++){\n        for (let j = 0; j<plan[i].courses.length; j++){\n            allCourses.push(plan[i].courses[j]);\n        }\n    }\n\n    //Matrix of the plan, only need the numbers (for prereq checks)\n    const plan_nums: string[][] = [[]];\n    for (let i = 0; i<plan.length; i++){\n        const sem_nums: string[] = [];\n        for (let j = 0; j<plan[i].courses.length; j++){\n            sem_nums.push(plan[i].courses[j].number);\n        }\n        plan_nums.push(sem_nums);\n    }\n\n    \n    //Checks for core courses\n    function checkCore():void{\n        const temp_missing: Course[] = [];\n        for(let i = 0; i<reqCourses.length; i++){\n            for(let j = 0; j<allCourses.length; j++){\n                if(allCourses[j].number === reqCourses[i].number \n                    && allCourses[j].name === reqCourses[i].name \n                    && allCourses[j].credits === reqCourses[i].credits){\n                    break;\n                }\n                if(j === allCourses.length-1){\n                    temp_missing.push(reqCourses[i]);\n                }\n            }            \n        }\n        setMissingCore(temp_missing);\n    }\n\n    //Check for CISC electives\n    // 6 required that are not core course\n    function checkCISCElec():void{\n        const temp_CISCelectives: Course[] = [];\n        for (let i = 0; i<allCourses.length; i++){\n            if(allCourses[i].number.startsWith(\"CISC\")){\n                for (let j = 0; j<reqCourses.length; j++){\n                    if(allCourses[i].name == reqCourses[j].name){\n                        break;\n                    }\n                    if(j === reqCourses.length-1){\n                        temp_CISCelectives.push(allCourses[i]);\n                    }\n                }\n            }\n        }\n        setCISCelectives(temp_CISCelectives);\n    }\n\n    //Check for breadths\n    function checkBreadths():void{\n        const temp_breadth: Course[] = [];\n\n        //Check general breadth\n        temp_breadth.push(isIn(allCourses,ArtsHumanities));\n        temp_breadth.push(isIn(allCourses,HistoryCultural));\n        temp_breadth.push(isIn(allCourses,SocialBehavioral));\n        temp_breadth.push(isIn(allCourses,Tech));\n\n        //COE additional breadths\n        const temp_additional: Course[] = isInAll(allCourses,COEupper);\n        //only one under 300 allowed\n        let used_lower = false;\n        for (let i = 0; i<temp_additional.length; i++){\n            //Upper?\n            const upper:boolean = temp_additional[i].number.slice(-3,-2) == \"3\" || temp_additional[i].number.slice(-3,-2) == \"4\";\n            //Is it already being used?\n            if(isIn(temp_breadth,[temp_additional[i].number]).number){\n                continue;\n            }else{\n                //Is it a second lower?\n                if (!upper && used_lower){\n                    continue;\n                }else{\n                    //Add it to the list\n                    temp_breadth.push(temp_additional[i]);\n                    if (!upper){\n                        used_lower = true;\n                    }\n                    //Is this our third? (only need 3)\n                    if (temp_breadth.length == 7){\n                        break;\n                    }\n                }\n            }\n        }\n        //if no additional breadth\n        if(!temp_additional[0].number){\n            temp_breadth.push({number:\"\", name:\"\", credits:0});\n        }\n\n        setBreadth(temp_breadth);\n    }\n\n    function checkPrereqs():void{\n        //check each rule from the json file\n        const rules_violated_temp: boolean[][] = [];\n        for (let i = 0; i<prereqs.length; i++){\n            const each_prereq: boolean[] = [];\n            let semester_course_occurs = -1;\n            //Find the course\n            for (let j = 0; j<plan.length; j++){\n                if (isIn(plan[j].courses, [prereqs[i].course]).number){\n                    //Found it!\n                    semester_course_occurs = j;\n                    break;\n                }\n                //If it's not here, the rule can't be violated, so it's false for each course\n                if (j === plan.length-1){\n                    for (let k = 0; k<prereqs[i].prereqs.length; k++){\n                        each_prereq.push(false);\n                    }\n                    break;\n                }\n            }\n            //We found it, gotta see if the rules are followed\n            for (let j = 0; j<prereqs[i].prereqs.length; j++){\n                for (let k = 0; k<semester_course_occurs; k++){\n                    if(isIn(plan[k].courses, [prereqs[i].prereqs[j]]).number){\n                        //Prerequisite rule is satisfied\n                        each_prereq.push(false);\n                        break;\n                    }\n                    //Prereq not satisfied\n                    if (k === semester_course_occurs-1){\n                        each_prereq.push(true);\n                    }\n                }\n            }\n            //Add the results for this course\n            rules_violated_temp.push(each_prereq);\n        }\n        //Are any prereqs missing? (For rendering \"none missing\" message)\n        let missing_prereqs_temp = false;\n        for (let i = 0; i<rules_violated_temp.length; i++){\n            for (let j = 0; j<rules_violated_temp[i].length; j++){\n                if (rules_violated_temp[i][j]){\n                    missing_prereqs_temp = true;\n                    break;\n                }\n            }\n            if (missing_prereqs_temp){\n                break;\n            }\n        }\n        //Update usestate\n        set_missing_prereqs(missing_prereqs_temp);\n        set_rules_violated(rules_violated_temp);\n    }\n\n    //Does the list of courses contain any of the numbers in the list of course numbers?\n    //If so, return the course of the first time it does\n    //If not, returns a 0 credit, empty course\n    function isIn(courses:Course[], nums:string[]):Course{\n        for (let i = 0; i<courses.length; i++){\n            for (let j = 0; j<nums.length; j++){\n                //Find first one that satisfies\n                if (courses[i].number === nums[j]){\n                    return courses[i];\n                }\n            }\n        }\n        return {number:\"\", name:\"\", credits:0};\n    }\n\n    //Same as isIn, but returns all\n    function isInAll(courses:Course[], nums:string[]):Course[]{\n        const temp_courses:Course[] = [];\n        for (let i = 0; i<courses.length; i++){\n            for (let j = 0; j<nums.length; j++){\n                //Does it satisfy?\n                if (courses[i].number === nums[j]){\n                    temp_courses.push(courses[i]);\n                }\n            }\n        }\n        //add the empty course if nothing matches\n        if (temp_courses.length === 0){\n            temp_courses.push({number:\"\", name:\"\", credits:0});\n        }\n        return temp_courses;\n    }\n\n    //Only do the checks once to avoid inf loop\n    const [checkRules, setCheckRules] = useState<boolean>(true);\n    if (!visible && !checkRules){\n        setCheckRules(true);\n    }else if(visible && checkRules){\n        checkCore();\n        checkCISCElec();\n        checkBreadths();\n        checkPrereqs();\n        setCheckRules(false);\n    }\n\n    return(\n        <Modal size=\"lg\" show={visible} onHide = {hide} data-testid = \"auditModal\">\n            <Modal.Header closeButton>\n                <Modal.Title>Schedule Audit</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div className=\"AuditLabel\">\n                    <strong className=\"AuditLabel\">Core Courses Missing</strong>\n                </div>\n                {missingCore.length?\n                    <AuditTable courses = {missingCore}></AuditTable>: <div className=\"BasicCenter\" data-testid = \"noCoreMissing\">None</div>\n                }\n                <div>\n                    <div className=\"AuditLabel\">\n                        <strong className=\"AuditLabel\">CISC Prerequisites Missing</strong>\n                    </div>\n                    {prereqs.map((p:Prereq, index0:number) => {\n                        return(\n                            p.prereqs.map((req:string, index1:number) => {\n                                if (rules_violated.length){\n                                    if(rules_violated[index0][index1]){\n                                        return(\n                                            <div className=\"BasicCenter\">\n                                                {req} is a prerequisite for {p.course}\n                                            </div>\n                                        );\n                                    }\n                                    //If no rules are violated\n                                    if(!missing_prereqs && index0===prereqs.length-1 && index1 ===p.prereqs.length-1){\n                                        return(\n                                            <div className=\"BasicCenter\" data-testid = \"noPrereqsMissing\">\n                                                None\n                                            </div>\n                                        );\n                                    }\n                                }\n                            })\n                        );\n                    })\n                    }\n                </div>\n                <div className=\"AuditLabel\">\n                    <strong className=\"AuditLabel\">CISC Electives (18 credits required)</strong>\n                </div>\n                <AuditTable courses={CISCelectives}></AuditTable>\n                <div className=\"AuditLabel\">\n                    <strong className=\"AuditLabel\">Breadth Electives</strong>\n                </div>\n                <div className=\"AuditLabel\">\n                    <strong className=\"AuditLabel\">Arts and Humanities (3 credits required)</strong>\n                </div>\n                <Table className=\"AuditTable\" striped={true} bordered>\n                    <thead>\n                        <tr>\n                            <th className=\"text-center\">\n                                Course Number\n                            </th>\n                            <th className=\"text-center\">\n                                Course Name\n                            </th>\n                            <th className=\"text-center\">\n                                Credits\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {breadth[0]?\n                            <tr>\n                                <td className=\"text-center\" data-testid = \"artsHumanities\">{breadth[0].number}</td>\n                                <td className=\"text-center\">{breadth[0].name}</td>\n                                <td className=\"text-center\">{breadth[0].credits}</td>\n                            </tr>\n                            :<tr></tr>}\n                    </tbody>\n                </Table>\n                <div className=\"AuditLabel\">\n                    <strong className=\"AuditLabel\">History and Cultural Change (3 credits required)</strong>\n                </div>\n                <Table className=\"AuditTable\" striped={true} bordered>\n                    <thead>\n                        <tr>\n                            <th className=\"text-center\">\n                                Course Number\n                            </th>\n                            <th className=\"text-center\">\n                                Course Name\n                            </th>\n                            <th className=\"text-center\">\n                                Credits\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {breadth[1]?\n                            <tr>\n                                <td className=\"text-center\" data-testid = \"history\">{breadth[1].number}</td>\n                                <td className=\"text-center\">{breadth[1].name}</td>\n                                <td className=\"text-center\">{breadth[1].credits}</td>\n                            </tr>\n                            :<tr></tr>}\n                    </tbody>\n                </Table>\n                <div className=\"AuditLabel\">\n                    <strong className=\"AuditLabel\">Social and Behavioral Science (3 credits required)</strong>\n                </div>\n                <Table className=\"AuditTable\" striped={true} bordered>\n                    <thead>\n                        <tr>\n                            <th className=\"text-center\">\n                                Course Number\n                            </th>\n                            <th className=\"text-center\">\n                                Course Name\n                            </th>\n                            <th className=\"text-center\">\n                                Credits\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {breadth[2]?\n                            <tr>\n                                <td className=\"text-center\" data-testid = \"social\">{breadth[2].number}</td>\n                                <td className=\"text-center\">{breadth[2].name}</td>\n                                <td className=\"text-center\">{breadth[2].credits}</td>\n                            </tr>\n                            :<tr></tr>}\n                    </tbody>\n                </Table>\n                <div className=\"AuditLabel\">\n                    <strong className=\"AuditLabel\">Mathematics, Natural Sciences, and Technology (3 credits required)</strong>\n                </div>\n                <Table className=\"AuditTable\" striped={true} bordered>\n                    <thead>\n                        <tr>\n                            <th className=\"text-center\">\n                                Course Number\n                            </th>\n                            <th className=\"text-center\">\n                                Course Name\n                            </th>\n                            <th className=\"text-center\">\n                                Credits\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {breadth[3]?\n                            <tr>\n                                <td className=\"text-center\" data-testid = \"technical\">{breadth[3].number}</td>\n                                <td className=\"text-center\">{breadth[3].name}</td>\n                                <td className=\"text-center\">{breadth[3].credits}</td>\n                            </tr>\n                            :<tr></tr>}\n                    </tbody>\n                </Table>\n                <div className=\"AuditLabel\">\n                    <strong className=\"AuditLabel\">COE Additional Breadth (9 credits, 6 upper)</strong>\n                </div>\n                <Table className=\"AuditTable\" striped={true} bordered>\n                    <thead>\n                        <tr>\n                            <th className=\"text-center\">\n                                Course Number\n                            </th>\n                            <th className=\"text-center\">\n                                Course Name\n                            </th>\n                            <th className=\"text-center\">\n                                Credits\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {breadth.slice(4).map((c:Course, index:number) => { \n                            return (\n                                <tr key={index}>\n                                    <td className=\"text-center\">{c.number}</td>\n                                    <td className=\"text-center\">{c.name}</td>\n                                    <td className=\"text-center\">{c.credits}</td>\n                                </tr>\n                            );\n                        })\n                        }\n                    </tbody>\n                </Table>\n            </Modal.Body>\n        </Modal>\n    );\n}","import React, {useEffect} from \"react\";\nimport { Course } from \"../interfaces/course\";\nimport { Semester, SemesterType, YearType } from \"../interfaces/semester\";\nimport { Button } from \"react-bootstrap\";\n\nexport function ControlPanel({plan, setPlan, setAuditVis}:{plan: Semester[], setPlan: (plan: Semester[])=> void, setAuditVis: (auditVis: boolean)=> void }): JSX.Element {\n    \n    function addSemester(){\n        let yearType = YearType.FirstYear;\n        let semesterType = SemesterType.Fall;\n        if(plan.length - 1 === 0){\n            yearType = YearType.FirstYear;\n            semesterType = SemesterType.Fall;\n        }else if (plan[plan.length - 2].semester === \"Fall\") {\n            yearType = plan[plan.length - 2].year;\n            semesterType = SemesterType.Spring;\n        }else{\n            semesterType = SemesterType.Fall;\n            if(plan[plan.length - 2].year === \"First Year\"){\n                yearType = YearType.SecondYear;\n            }else if(plan[plan.length - 2].year === \"Second Year\"){\n                yearType = YearType.ThirdYear;\n            }else if(plan[plan.length - 2].year === \"Third Year\"){\n                yearType = YearType.FourthYear;\n            }else if(plan[plan.length - 2].year === \"Fourth Year\"){\n                yearType = YearType.FifthYear;\n            }\n        }\n        console.log(plan.length);\n        const newSemester = {year: yearType, semester: semesterType, courses: []};\n        console.log(newSemester.year);\n        setPlan([...plan.slice(0,-1),\n            newSemester,\n            plan[plan.length - 1]]);\n    }\n    function RemoveAllSemesters():void{\n        setPlan(plan.filter(s => s.year === \"Pool of Courses\"));\n    }\n\n    function download(){\n        function semCourses(c: Course[]){\n            const semCourse = c.map((q: Course) => q.number + \",\" + q.name + \",\" + q.credits);\n            return semCourse;\n        }\n        const csvContent = \"data:text/csv;charset=utf-8,\" + \"Year,\" + \"Semester,\" + \"ID,\" + \"Title,\" + \"Credits,\" + plan.map((s: Semester) => \"\\n\" + s.year + \",\" + s.semester + \",\" + semCourses(s.courses));\n        const hiddenElement = document.createElement(\"a\");  \n        hiddenElement.href = encodeURI(csvContent);  \n        hiddenElement.target = \"_blank\";\n        hiddenElement.download = \"Schedule.csv\";  \n        hiddenElement.click();  \n    }\n    //Credit https://www.code-boost.com/react-local-storage/\n    useEffect(() => {\n        if(sessionStorage.getItem(\"localplan\") != null){\n            const json = sessionStorage.getItem(\"localplan\");\n            const savedPlan = JSON.parse(json || \"\");\n            if(savedPlan){\n                setPlan(savedPlan);\n            }\n        }\n    }, []);\n    useEffect(() => {\n        if(plan){\n            const json = JSON.stringify(plan);\n            sessionStorage.setItem(\"localplan\", json);\n        }\n    }, [plan]);\n    \n    function showAudit():void{\n        setAuditVis(true);\n    }\n    return(\n        <div>\n            <Button onClick= {addSemester}>Add Semester</Button>\n            <Button onClick= {RemoveAllSemesters}>Remove All Semesters</Button>\n            <Button onClick= {showAudit}>Audit</Button>\n            <Button onClick= {download}>Download</Button>\n        </div>\n    );\n}\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport COURSES from \"./assets/courses.json\";\nimport { Semester} from \"./interfaces/semester\";\nimport { Welcome } from \"./components/Welcome\";\nimport { PlanViewer } from \"./components/PlanViewer\";\nimport { AuditModal } from \"./components/AuditModal\";\nimport { ControlPanel } from \"./components/ControlPanel\";\nfunction App(): JSX.Element {\n    const [plan, setPlan] = useState<Semester[]>(COURSES as Semester[]);\n    const [visible, setVisible] = useState<boolean>(true);\n    const [auditVis, setAuditVis] = useState<boolean>(false);\n\n    \n    return (\n        <div className=\"App\">\n            <p>UD CIS Scheduler</p>\n            <ControlPanel plan={plan} setPlan={setPlan} setAuditVis={setAuditVis}></ControlPanel>\n            <PlanViewer plan={plan} setPlan={setPlan}></PlanViewer>\n            <Welcome visible = {visible} setVisible = {setVisible}></Welcome>\n            <AuditModal plan={plan} visible={auditVis} setVisible={setAuditVis}></AuditModal>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}