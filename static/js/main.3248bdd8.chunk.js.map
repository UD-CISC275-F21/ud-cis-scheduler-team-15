{"version":3,"sources":["components/CourseViewer.tsx","components/Welcome.tsx","components/ChangeData.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CourseViewer","course","dotsStyle","setDotsStyle","setChangePromptVis","Table","striped","bordered","hover","onMouseEnter","display","onMouseLeave","number","name","className","credits","style","onClick","Welcome","visible","setVisible","Modal","show","onHide","Header","closeButton","Title","Body","ChangeData","setCourse","hide","id","type","defaultValue","numberHTML","document","getElementById","nameHTML","creditsHTML","value","Number","update","App","useState","COURSES","courses","changePromptVis","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3248bdd8.chunk.js","sourcesContent":["import React from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { Course } from \"../interfaces/course\";\n\nexport function CourseViewer({course, dotsStyle, setDotsStyle, setChangePromptVis}: \n    {course: Course;\n    dotsStyle: {display: string};\n    setDotsStyle: (docStyle: {display: string})=>void;\n    setChangePromptVis: (vis: boolean)=>void;\n    }\n    \n): JSX.Element {\n    return (\n        <Table striped={true} bordered hover\n            // Citation: https://stackoverflow.com/questions/61126014/how-to-show-button-while-hover-over-box-using-react\n            onMouseEnter={() => {\n                setDotsStyle({display: \"block\"});\n            }}\n            onMouseLeave={() => {\n                setDotsStyle({display: \"none\"});\n            }}>\n            <tbody>\n                <tr>\n                    <td>{course.number}</td>\n                    <td>{course.name}</td>\n                    <td className = \"split\">\n                        <div className = \"credits\">{course.credits}</div>\n                        <button className = \"dotButton\" style = {dotsStyle} onClick = {()=>setChangePromptVis(true)}>\n                            <div className = \"dot\"></div>\n                            <div className = \"dot\"></div>\n                            <div className = \"dot\"></div>\n                        </button>\n                    </td>\n                </tr>\n            </tbody>\n        </Table>\n    );\n}","import React from \"react\";\nimport {Modal} from \"react-bootstrap\";\nexport function Welcome({visible, setVisible}: {visible: boolean, setVisible: (b: boolean) => void}): JSX.Element {\n    const hide = () => setVisible(false);\n    \n    return (\n        <Modal show={visible} onHide = {hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Welcome!</Modal.Title>\n            </Modal.Header>\n      \n            <Modal.Body>\n                <p>This web app is designed to help you plan out your course schedule in order to complete your CIS Schedule.</p>\n            </Modal.Body>\n        </Modal>\n    );\n}","\nimport React from \"react\";\nimport {Modal} from \"react-bootstrap\";\nimport { Course } from \"../interfaces/course\";\nexport function ChangeData({course, setCourse, visible, setVisible}:\n    {course: Course;\n    setCourse: (course: Course)=>void;\n    visible: boolean;\n    setVisible: (visible: boolean)=>void;\n    }): JSX.Element{\n\n    const hide = () => setVisible(false);\n\n    function update():void{\n        const numberHTML = document.getElementById(\"numberUpdate\") as HTMLInputElement;\n        const nameHTML  = document.getElementById(\"nameUpdate\") as HTMLInputElement;\n        const creditsHTML = document.getElementById(\"creditsUpdate\") as HTMLInputElement;\n        setCourse({number:numberHTML.value, name: nameHTML.value, credits: Number(creditsHTML.value)});\n        hide();\n    }\n    return(\n        <Modal show={visible} onHide = {hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Course Info</Modal.Title>\n            </Modal.Header>\n    \n            <Modal.Body>\n                <div className=\"dataEditorLabel\">\n                    <strong>Edit Course Number:</strong>\n                    <input className=\"dataInput\" id=\"numberUpdate\" type=\"text\" defaultValue={course.number}></input>\n                </div>\n                <div className=\"dataEditorLabel\">\n                    <strong>Edit Course Name:</strong>\n                    <input className=\"dataInput\" id=\"nameUpdate\" defaultValue={course.name}></input>\n                </div>\n                <div className=\"dataEditorLabel\">\n                    <strong>Edit Credits:</strong>\n                    <div>\n                        <input className=\"dataInputCred\" id=\"creditsUpdate\" type=\"number\" defaultValue={course.credits}></input>\n                    </div>\n                </div>\n                <button className=\"saveChanges\" onClick={() => update()}>Save Changes</button>\n            </Modal.Body>\n        </Modal>\n    );     \n}","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport COURSES from \"./assets/courses.json\";\nimport { CourseViewer } from \"./components/CourseViewer\";\n// import { SemesterViewer } from \"./components/SemesterViewer\";\nimport { Course } from \"./interfaces/course\";\n// import { Semester } from \"./interfaces/semester\";\nimport {Welcome} from \"./components/Welcome\";\nimport { ChangeData } from \"./components/ChangeData\";\n\nfunction App(): JSX.Element {\n    // const [semester] = useState<Semester>(COURSES[0] as Semester);\n    const [course, setCourse] = useState<Course>(COURSES[0].courses[0]);\n    const [dotsStyle, setDotsStyle] = useState({display: \"none\"});\n    const [changePromptVis, setChangePromptVis] = useState<boolean>(false);\n    const [visible, setVisible] = useState<boolean>(true);\n    console.log(changePromptVis);\n\n    return (\n        <div className=\"App\">\n            <p>UD CIS Scheduler</p>\n            <ChangeData course={course} setCourse={setCourse} visible={changePromptVis} setVisible={setChangePromptVis}></ChangeData>\n            <CourseViewer course={course} dotsStyle={dotsStyle} setDotsStyle={setDotsStyle} setChangePromptVis={setChangePromptVis}></CourseViewer>\n            <Welcome visible = {visible} setVisible = {setVisible}></Welcome>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}