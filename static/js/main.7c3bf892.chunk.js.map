{"version":3,"sources":["components/Welcome.tsx","components/ChangeData.tsx","components/CourseViewer.tsx","components/SemesterMenu.tsx","components/SemesterTable.tsx","components/PlanViewer.tsx","components/ControlPanel.tsx","interfaces/semester.ts","components/AddSemesterModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Welcome","visible","setVisible","Modal","show","onHide","Header","closeButton","Title","Body","ChangeData","index","sem_index","plan","setPlan","hide","update","numberHTML","document","getElementById","nameHTML","creditsHTML","c","temp_sem","courses","temp_plan","setCourse","number","value","name","credits","Number","className","id","type","defaultValue","onClick","temp_courses","splice","ReactDOM","render","StrictMode","del","CourseViewer","key","useState","display","dotsStyle","setDotsStyle","changePromptVis","setChangePromptVis","onMouseEnter","onMouseLeave","style","SemesterMenu","semMenuVis","setSemMenuVis","console","log","Col","Button","variant","map","s","SemesterTable","year","semester","Table","striped","bordered","PlanViewer","length","ControlPanel","showAddSemesterModal","Row","YearType","SemesterType","AddSemesterModal","addSemesterModal","addSemester","FirstYear","yearType","setYearType","Fall","semesterType","setSemesterType","radios","SecondYear","ThirdYear","FourthYear","radios2","Spring","ButtonGroup","radio","idx","ToggleButton","checked","onChange","e","currentTarget","Footer","App","COURSES","newSemester","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.7c3bf892.chunk.js","sourcesContent":["import React from \"react\";\nimport {Modal} from \"react-bootstrap\";\nexport function Welcome({visible, setVisible}: {visible: boolean, setVisible: (b: boolean) => void}): JSX.Element {\n    const hide = () => setVisible(false);\n    \n    return (\n        <Modal show={visible} onHide = {hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Welcome!</Modal.Title>\n            </Modal.Header>\n      \n            <Modal.Body>\n                <p>This web app is designed to help you plan out your course schedule in order to complete your CIS Schedule.</p>\n            </Modal.Body>\n        </Modal>\n    );\n}","\nimport React from \"react\";\nimport {Modal} from \"react-bootstrap\";\nimport ReactDOM from \"react-dom\";\nimport App from \"../App\";\nimport { Course } from \"../interfaces/course\";\nimport { Semester } from \"../interfaces/semester\";\nexport function ChangeData({index, sem_index, plan, setPlan, visible, setVisible}:\n    {index: number;\n    sem_index:number;\n    plan: Semester[];\n    setPlan: (plan: Semester[])=>void;\n    visible: boolean;\n    setVisible: (visible: boolean)=>void;\n    }): JSX.Element{\n\n    function setCourse(c: Course):void{\n        const temp_sem: Semester = plan[sem_index];\n        plan[sem_index].courses[index] = c;\n        const temp_plan: Semester[] = plan;\n        temp_plan[sem_index] = temp_sem;\n        setPlan(temp_plan);\n    }\n\n    const hide = () => setVisible(false);\n\n    function update():void{\n        const numberHTML = document.getElementById(\"numberUpdate\") as HTMLInputElement;\n        const nameHTML  = document.getElementById(\"nameUpdate\") as HTMLInputElement;\n        const creditsHTML = document.getElementById(\"creditsUpdate\") as HTMLInputElement;\n        setCourse({number:numberHTML.value, name: nameHTML.value, credits: Number(creditsHTML.value)});\n        hide();\n    }\n\n    function del():void{\n        const temp_courses: Course[]= plan[sem_index].courses;\n        temp_courses.splice(index,1);\n        const temp_sem: Semester = plan[sem_index];\n        temp_sem.courses = temp_courses;\n        const temp_plan = plan;\n        temp_plan[sem_index] = temp_sem;\n        setPlan(temp_plan);    \n        hide();\n        //Rerender everything!!!\n        ReactDOM.render(\n            <React.StrictMode>\n                <App />\n            </React.StrictMode>,\n            document.getElementById(\"root\")\n        );    \n    }\n\n    return(\n        <Modal show={visible} onHide = {hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Course Info</Modal.Title>\n            </Modal.Header>\n    \n            <Modal.Body>\n                <div className=\"dataEditorLabel\">\n                    <strong>Edit Course Number:</strong>\n                    <input className=\"dataInput\" id=\"numberUpdate\" type=\"text\" defaultValue={plan[sem_index].courses[index].number}></input>\n                </div>\n                <div className=\"dataEditorLabel\">\n                    <strong>Edit Course Name:</strong>\n                    <input className=\"dataInput\" id=\"nameUpdate\" defaultValue={plan[sem_index].courses[index].name}></input>\n                </div>\n                <div className=\"dataEditorLabel\">\n                    <strong>Edit Credits:</strong>\n                    <div>\n                        <input className=\"dataInputCred\" id=\"creditsUpdate\" type=\"number\" defaultValue={plan[sem_index].courses[index].credits}></input>\n                    </div>\n                </div>\n                <button className=\"saveChanges\" onClick={() => update()}>Save Changes</button>\n                <button className=\"deleteCourse\" onClick={() => del()}>Delete Course</button>\n            </Modal.Body>\n        </Modal>\n    );     \n}","import React, { useState } from \"react\";\nimport { Semester } from \"../interfaces/semester\";\nimport { ChangeData } from \"./ChangeData\";\n\nexport function CourseViewer({key, index, sem_index, plan, setPlan}: \n    {key: number\n    index: number;\n    sem_index: number;\n    plan: Semester[];\n    setPlan: (plan: Semester[])=> void;\n    }\n    \n): JSX.Element {\n    const [dotsStyle, setDotsStyle] = useState({display: \"none\"});\n    const [changePromptVis, setChangePromptVis] = useState<boolean>(false);\n    \n    return (\n        <tr key={key}\n        // Citation: https://stackoverflow.com/questions/61126014/how-to-show-button-while-hover-over-box-using-react\n            onMouseEnter={() => {\n                setDotsStyle({display: \"block\"});\n            }}\n            onMouseLeave={() => {\n                setDotsStyle({display: \"none\"});\n            }}>\n            <td className=\"courseNum\">{plan[sem_index].courses[index].number}</td>\n            <td className=\"courseName\">{plan[sem_index].courses[index].name}</td>\n            <td className = \"split\">\n                <div className = \"credits\">{plan[sem_index].courses[index].credits}</div>\n                <button className = \"dotButton\" style = {dotsStyle} onClick = {()=>setChangePromptVis(true)}>\n                    <div className = \"dot\"></div>\n                    <div className = \"dot\"></div>\n                    <div className = \"dot\"></div>\n                </button>\n            </td>\n            <ChangeData index={index} sem_index={sem_index} plan={plan} setPlan={setPlan} visible={changePromptVis} setVisible={setChangePromptVis}></ChangeData>\n        </tr>\n    );\n}","import React from \"react\";\nimport { Semester } from \"../interfaces/semester\";\nimport { Modal, Col } from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\n/*import { updateLanguageServiceSourceFile } from \"typescript\";*/\n\nexport function SemesterMenu({sem_index, plan, setPlan, semMenuVis, setSemMenuVis}:\n    {sem_index: number;\n    plan: Semester[],\n    setPlan: (plan: Semester[])=>void,\n    semMenuVis: boolean,\n    setSemMenuVis: (semMenuVis: boolean)=>void}\n):JSX.Element{\n\n    console.log(sem_index);\n    console.log(plan);\n    console.log(setPlan);\n    const hide = () => setSemMenuVis(false);\n\n    function clearSemester():void{\n        setPlan(plan.map((s:Semester) => {\n            if (s === plan[sem_index]) {\n                return {...s, courses: []};\n            } else {\n                return {...s};\n            }\n        }));\n        setSemMenuVis(false);\n    }\n\n    /*function deleteSemester(s:Semester):void{\n        const tempPlan:Semester[] = plan;\n        tempPlan.map((s:Semester) => {\n            if (s != plan[sem_index]) {\n                return {...s};\n            }\n        });\n        setPlan(tempPlan);\n        setSemMenuVis(false);\n    }*/\n\n    // makes a copy of the old plan but with a new course in the selected semester\n    function setPlanViewer():void{\n        setPlan(plan.map((s:Semester) => {\n            if (s === plan[sem_index]) {\n                return {...plan[sem_index], courses: [...plan[sem_index].courses, {number: \"\", name: \"\", credits: 0}]};\n            } else {\n                return {...s};\n            }\n        }));\n        setSemMenuVis(false);\n    }\n\n    return(\n        <Modal show={semMenuVis} onHide = {hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Course to Semester</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Col>\n                    <Button variant=\"success\" onClick={() => setPlanViewer()}>Add a course</Button>\n                </Col>\n                <Col>\n                    <Button variant=\"danger\" onClick={() => clearSemester()}>Delete all courses from semester</Button>\n                </Col>\n                <Col>\n                    <Button variant=\"danger\" /*onClick={() => deleteSemester(plan[sem_index])}*/>Delete semester</Button>\n                </Col>\n            </Modal.Body>\n        </Modal>\n    );\n}\n","import { Table } from \"react-bootstrap\";\nimport { Course } from \"../interfaces/course\";\nimport { Semester } from \"../interfaces/semester\";\nimport { CourseViewer } from \"./CourseViewer\";\nimport React, { useState } from \"react\";\nimport { SemesterMenu } from \"./SemesterMenu\";\n\nexport function SemesterTable({sem_index, plan, setPlan}:\n    {sem_index: number;\n    plan: Semester[];\n    setPlan: (plan: Semester[])=>void}):\n    JSX.Element{\n\n    const [dotsStyle, setDotsStyle] = useState({display: \"none\"});\n    const [changePromptVis, setChangePromptVis] = useState<boolean>(false);\n\n    return (\n        <div className = \"SemesterTable\">\n            <table // Citation: https://stackoverflow.com/questions/61126014/how-to-show-button-while-hover-over-box-using-react\n                onMouseEnter={() => {\n                    setDotsStyle({display: \"block\"});\n                }}\n                onMouseLeave={() => {\n                    setDotsStyle({display: \"none\"});\n                }} className=\"SemesterHeader\">\n                <td className=\"yearLabel\">\n                    <strong>{plan[sem_index].year}</strong>\n                </td>\n                <td className = \"split\">\n                    <strong className=\"semLabel\">{plan[sem_index].semester}</strong>\n                    <button className = \"dotButton\" style = {dotsStyle} onClick = {()=>setChangePromptVis(true)}>\n                        <div className = \"dot\"></div>\n                        <div className = \"dot\"></div>\n                        <div className = \"dot\"></div>\n                    </button>\n                </td>\n            </table>\n            <SemesterMenu sem_index={sem_index} plan={plan} setPlan={setPlan} semMenuVis={changePromptVis} setSemMenuVis={setChangePromptVis}></SemesterMenu>\n\n            <Table striped={true} bordered>\n                <thead>\n                    <tr>\n                        <th>\n                            Course Number\n                        </th>\n                        <th>\n                            Course Name\n                        </th>\n                        <th>\n                            Credits\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {plan[sem_index].courses.map((c:Course, index:number) => { \n                        return (\n                            <CourseViewer key={index} index={index} sem_index={sem_index} plan={plan} setPlan={setPlan}></CourseViewer>\n                        );\n                    }\n                    )}\n                </tbody>\n            </Table>\n        </div>\n    );\n}","import { Semester } from \"../interfaces/semester\";\nimport { SemesterTable } from \"./SemesterTable\";\nimport React from \"react\";\n\nexport function PlanViewer({plan, setPlan}:\n    {plan: Semester[];\n    setPlan: (plan: Semester[])=>void}\n):JSX.Element{\n    \n    return(\n        <div>\n            {plan.map((s:Semester, index:number) =>{\n                if(index%2 === 0 && index!=plan.length-1){\n                    return(\n                        <div className=\"YearTable\" key={index}>\n                            <table className=\"YearTable\">\n                                <tr>\n                                    <td className=\"Fall\">\n                                        <SemesterTable sem_index={index} plan={plan} setPlan={setPlan}></SemesterTable>\n                                    </td>\n                                    <td className=\"Spring\">\n                                        <SemesterTable sem_index={index+1} plan={plan} setPlan={setPlan}></SemesterTable>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    );\n                }\n                if(index%2 === 0 && index===plan.length-1){\n                    return(\n                        <div className=\"YearTable\" key={index}>\n                            <table className=\"YearTable\">\n                                <tr>\n                                    <td className=\"Fall\">\n                                        <SemesterTable sem_index={index} plan={plan} setPlan={setPlan}></SemesterTable>\n                                    </td>\n                                    <td className=\"Spring\">\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    );\n                }\n            })}\n        </div>\n    );\n}","import { Button } from \"react-bootstrap\";\nimport { Row } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport function ControlPanel({showAddSemesterModal}: \n    {showAddSemesterModal: (b: boolean)=>void}): JSX.Element{\n    function addSemester()  {\n        showAddSemesterModal(true);\n    }\n    return<Row>\n        <Button onClick= {addSemester} className=\"semesterbutton\">Add Semester</Button>\n    </Row>;\n}\n\n","import { Course } from \"./course\";\n\nexport enum YearType {\n    FirstYear = \"First Year\",\n    SecondYear = \"Second Year\",\n    ThirdYear = \"Third Year\",\n    FourthYear = \"Fourth Year\"\n}\n\nexport enum SemesterType {\n    Fall = \"Fall\",\n    Spring = \"Spring\"\n}\n\nexport interface Semester {\n    year: YearType\n    semester: SemesterType\n    courses: Course[]\n}","import { useState } from \"react\";\nimport { Button, Modal, ButtonGroup, Col, ToggleButton } from \"react-bootstrap\";\nimport React from \"react\";\nimport { Semester, SemesterType, YearType } from \"../interfaces/semester\";\n\nexport function AddSemesterModal({addSemesterModal, showAddSemesterModal, addSemester}:\n    {addSemesterModal: boolean, showAddSemesterModal: (b: boolean)=> void, addSemester: (s: Semester) => void}): JSX.Element {\n    const hide = () => showAddSemesterModal(false);\n    function saveSemester(){\n        addSemester({year: yearType, semester: semesterType, courses: []});\n    }\n    //const [checked, setChecked] = useState(false);\n    //const [radioValue, setRadioValue] = useState(\"1\");\n    const [yearType, setYearType] = useState<YearType>(YearType.FirstYear);\n    const [semesterType, setSemesterType] = useState<SemesterType>(SemesterType.Fall);\n    const radios = [\n        { name: \"1\", value: YearType.FirstYear },\n        { name: \"2\", value: YearType.SecondYear },\n        { name: \"3\", value: YearType.ThirdYear },\n        { name: \"4\", value: YearType.FourthYear }\n    ];\n    const radios2 = [\n        { name: \"Fall\", value: SemesterType.Fall },\n        { name: \"Spring\", value: SemesterType.Spring }\n    ];\n    return <Col>\n        <Modal show={addSemesterModal} onHide = {hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add New Semester</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div><strong>Year of Semester</strong></div>\n                <ButtonGroup>\n                    {radios.map((radio, idx) => \n                        <ToggleButton\n                            key={idx}\n                            id={`radio-${idx}`}\n                            type=\"radio\"\n                            variant=\"secondary\"\n                            name=\"radio\"\n                            value={radio.value}\n                            checked={yearType === radio.value}\n                            onChange={(e) => setYearType((e.currentTarget.value) as YearType)}\n                        >\n                            {radio.name}\n                        </ToggleButton>\n                    )}\n                </ButtonGroup>\n            </Modal.Body>\n            <Modal.Body>\n                <div><strong>Semester Season</strong></div>\n                <ButtonGroup>\n                    {radios2.map(\n                        (radio, idx) => \n                            <ToggleButton\n                                key={idx}\n                                id={`radio-${idx}`}\n                                type=\"radio\"\n                                variant=\"secondary\"\n                                name=\"radio\"\n                                value={radio.value}\n                                checked={semesterType === radio.value}\n                                onChange={(e) => setSemesterType((e.currentTarget.value) as SemesterType)}\n                            >\n                                {radio.name}\n                            </ToggleButton>\n                        \n                    )}\n                </ButtonGroup>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={saveSemester}>Save Changes</Button>\n            </Modal.Footer>\n        </Modal>\n    </Col>;\n}","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport COURSES from \"./assets/courses.json\";\nimport { Semester } from \"./interfaces/semester\";\nimport { Welcome } from \"./components/Welcome\";\nimport { PlanViewer } from \"./components/PlanViewer\";\nimport { ControlPanel} from \"./components/ControlPanel\";\nimport { AddSemesterModal } from \"./components/AddSemesterModal\";\n\nfunction App(): JSX.Element {\n    const [plan, setPlan] = useState<Semester[]>(COURSES as Semester[]);\n    const [visible, setVisible] = useState<boolean>(true);\n    const [addSemesterModal, showAddSemesterModal] = useState<boolean>(false);\n    function addSemester(newSemester: Semester){\n        setPlan([...plan, newSemester]);\n    }\n    function RemoveAllSemesters(){\n        setPlan([]);\n    }\n\n    return (\n        <div className=\"App\">\n            <p>UD CIS Scheduler</p>\n            <AddSemesterModal addSemesterModal = {addSemesterModal} showAddSemesterModal = {showAddSemesterModal} addSemester = {addSemester}></AddSemesterModal>\n            <ControlPanel showAddSemesterModal = {showAddSemesterModal}></ControlPanel>\n            <Button onClick= {RemoveAllSemesters}>Remove All Semesters</Button>\n            <PlanViewer plan={plan} setPlan={setPlan}></PlanViewer>\n            <Welcome visible = {visible} setVisible = {setVisible}></Welcome>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}