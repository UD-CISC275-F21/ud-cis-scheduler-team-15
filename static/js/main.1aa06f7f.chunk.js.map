{"version":3,"sources":["interfaces/semester.ts","components/Welcome.tsx","components/ChangeData.tsx","components/CourseViewer.tsx","components/SemesterMenu.tsx","components/SemesterTable.tsx","components/PlanViewer.tsx","components/AuditModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["YearType","SemesterType","Welcome","visible","setVisible","Modal","show","onHide","Header","closeButton","Title","Body","ChangeData","index","sem_index","plan","setPlan","hide","update","numberHTML","document","getElementById","nameHTML","creditsHTML","c","temp_sem","courses","temp_plan","setCourse","number","value","name","credits","Number","className","id","type","defaultValue","onClick","temp_courses","splice","ReactDOM","render","StrictMode","del","CourseViewer","key","useState","display","dotsStyle","setDotsStyle","changePromptVis","setChangePromptVis","onMouseEnter","onMouseLeave","style","SemesterMenu","semMenuVis","setSemMenuVis","clearSemester","map","s","deleteSemester","filter","setPlanViewer","year","Col","Button","variant","disabled","SemesterTable","semester","Table","striped","bordered","PlanViewer","length","AuditModal","missingCore","setMissingCore","CISCelectives","setCISCelectives","breadth","setBreadth","reqCourses","RequiredCourses","prereqs","CISCprereqs","rules_violated","set_rules_violated","missing_prereqs","set_missing_prereqs","allCourses","i","j","push","plan_nums","sem_nums","isIn","nums","checkRules","setCheckRules","temp_missing","checkCore","temp_CISCelectives","startsWith","checkCISCElec","temp_breadth","ArtsHumanities","HistoryCultural","SocialBehavioral","Tech","temp_additional","isInAll","COEupper","used_lower","upper","slice","checkBreadths","rules_violated_temp","each_prereq","semester_course_occurs","course","k","missing_prereqs_temp","checkPrereqs","size","p","index0","req","index1","App","COURSES","auditVis","setAuditVis","useEffect","sessionStorage","getItem","json","savedPlan","JSON","parse","stringify","setItem","yearType","FirstYear","semesterType","Fall","Spring","SecondYear","ThirdYear","FourthYear","newSemester","csvContent","q","hiddenElement","createElement","href","encodeURI","target","download","click","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.1aa06f7f.chunk.js","sourcesContent":["import { Course } from \"./course\";\n\nexport enum YearType {\n    FirstYear = \"First Year\",\n    SecondYear = \"Second Year\",\n    ThirdYear = \"Third Year\",\n    FourthYear = \"Fourth Year\",\n    PoolOfCourses = \"Pool of Courses\"\n}\n\nexport enum SemesterType {\n    Fall = \"Fall\",\n    Spring = \"Spring\",\n    PoolOfCourses = \"Pool of Courses\"\n}\n\nexport interface Semester {\n    year: YearType\n    semester: SemesterType\n    courses: Course[]\n}","import React from \"react\";\nimport {Modal} from \"react-bootstrap\";\nexport function Welcome({visible, setVisible}: {visible: boolean, setVisible: (b: boolean) => void}): JSX.Element {\n    const hide = () => setVisible(false);\n    \n    return (\n        <Modal show={visible} onHide = {hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Welcome!</Modal.Title>\n            </Modal.Header>\n      \n            <Modal.Body>\n                <p>This web app is designed to help you plan out your course schedule in order to complete your CIS Schedule.</p>\n            </Modal.Body>\n        </Modal>\n    );\n}","\nimport React from \"react\";\nimport {Modal} from \"react-bootstrap\";\nimport ReactDOM from \"react-dom\";\nimport App from \"../App\";\nimport { Course } from \"../interfaces/course\";\nimport { Semester } from \"../interfaces/semester\";\nexport function ChangeData({index, sem_index, plan, setPlan, visible, setVisible}:\n    {index: number;\n    sem_index:number;\n    plan: Semester[];\n    setPlan: (plan: Semester[])=>void;\n    visible: boolean;\n    setVisible: (visible: boolean)=>void;\n    }): JSX.Element{\n\n    function setCourse(c: Course):void{\n        const temp_sem: Semester = plan[sem_index];\n        plan[sem_index].courses[index] = c;\n        const temp_plan: Semester[] = plan;\n        temp_plan[sem_index] = temp_sem;\n        setPlan(temp_plan);\n    }\n\n    const hide = () => setVisible(false);\n\n    function update():void{\n        const numberHTML = document.getElementById(\"numberUpdate\") as HTMLInputElement;\n        const nameHTML  = document.getElementById(\"nameUpdate\") as HTMLInputElement;\n        const creditsHTML = document.getElementById(\"creditsUpdate\") as HTMLInputElement;\n        setCourse({number:numberHTML.value, name: nameHTML.value, credits: Number(creditsHTML.value)});\n        hide();\n    }\n\n    function del():void{\n        const temp_courses: Course[]= plan[sem_index].courses;\n        temp_courses.splice(index,1);\n        const temp_sem: Semester = plan[sem_index];\n        temp_sem.courses = temp_courses;\n        const temp_plan = plan;\n        temp_plan[sem_index] = temp_sem;\n        setPlan(temp_plan);    \n        hide();\n        //Rerender everything!!!\n        ReactDOM.render(\n            <React.StrictMode>\n                <App />\n            </React.StrictMode>,\n            document.getElementById(\"root\")\n        );    \n    }\n\n    return(\n        <Modal show={visible} onHide = {hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Course Info</Modal.Title>\n            </Modal.Header>\n    \n            <Modal.Body>\n                <div className=\"dataEditorLabel\">\n                    <strong>Edit Course Number:</strong>\n                    <input className=\"dataInput\" id=\"numberUpdate\" type=\"text\" defaultValue={plan[sem_index].courses[index].number}></input>\n                </div>\n                <div className=\"dataEditorLabel\">\n                    <strong>Edit Course Name:</strong>\n                    <input className=\"dataInput\" id=\"nameUpdate\" defaultValue={plan[sem_index].courses[index].name}></input>\n                </div>\n                <div className=\"dataEditorLabel\">\n                    <strong>Edit Credits:</strong>\n                    <div>\n                        <input className=\"dataInputCred\" id=\"creditsUpdate\" type=\"number\" defaultValue={plan[sem_index].courses[index].credits}></input>\n                    </div>\n                </div>\n                <button className=\"saveChanges\" onClick={() => update()}>Save Changes</button>\n                <button className=\"deleteCourse\" onClick={() => del()}>Delete Course</button>\n            </Modal.Body>\n        </Modal>\n    );     \n}","import React, { useState } from \"react\";\nimport { Semester } from \"../interfaces/semester\";\nimport { ChangeData } from \"./ChangeData\";\n\nexport function CourseViewer({key, index, sem_index, plan, setPlan}: \n    {key: number\n    index: number;\n    sem_index: number;\n    plan: Semester[];\n    setPlan: (plan: Semester[])=> void;\n    }\n    \n): JSX.Element {\n    const [dotsStyle, setDotsStyle] = useState({display: \"none\"});\n    const [changePromptVis, setChangePromptVis] = useState<boolean>(false);\n    \n    return (\n        <tr key={key}\n        // Citation: https://stackoverflow.com/questions/61126014/how-to-show-button-while-hover-over-box-using-react\n            onMouseEnter={() => {\n                setDotsStyle({display: \"block\"});\n            }}\n            onMouseLeave={() => {\n                setDotsStyle({display: \"none\"});\n            }}>\n            <td className=\"courseNum\">{plan[sem_index].courses[index].number}</td>\n            <td className=\"courseName\">{plan[sem_index].courses[index].name}</td>\n            <td className = \"split\">\n                <div className = \"credits\">{plan[sem_index].courses[index].credits}</div>\n                <button className = \"dotButton\" style = {dotsStyle} onClick = {()=>setChangePromptVis(true)}>\n                    <div className = \"dot\"></div>\n                    <div className = \"dot\"></div>\n                    <div className = \"dot\"></div>\n                </button>\n            </td>\n            <ChangeData index={index} sem_index={sem_index} plan={plan} setPlan={setPlan} visible={changePromptVis} setVisible={setChangePromptVis}></ChangeData>\n        </tr>\n    );\n}","import React from \"react\";\nimport { Semester } from \"../interfaces/semester\";\nimport { Modal, Col } from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\n/*import { updateLanguageServiceSourceFile } from \"typescript\";*/\n\nexport function SemesterMenu({sem_index, plan, setPlan, semMenuVis, setSemMenuVis}:\n    {sem_index: number;\n    plan: Semester[],\n    setPlan: (plan: Semester[])=>void,\n    semMenuVis: boolean,\n    setSemMenuVis: (semMenuVis: boolean)=>void}\n):JSX.Element{\n\n\n    const hide = () => setSemMenuVis(false);\n\n    // clears a semester's courses by replacing it with an empty semester\n    function clearSemester():void{\n        setPlan(plan.map((s:Semester) => {\n            if (s === plan[sem_index]) {\n                return {...s, courses: []};\n            } else {\n                return {...s};\n            }\n        }));\n        setSemMenuVis(false);\n    }\n\n    // deletes a semester by filtering it out of the plan\n    function deleteSemester():void{\n        setPlan(plan.filter(s => s != plan[sem_index]));\n        setSemMenuVis(false);\n    }\n\n    // makes a copy of the old plan but with a new course in the selected semester\n    function setPlanViewer():void{\n        setPlan(plan.map((s:Semester) => {\n            if (s === plan[sem_index]) {\n                return {...s, courses: [...plan[sem_index].courses, {number: \"\", name: \"\", credits: 0}]};\n            } else {\n                return {...s};\n            }\n        }));\n        setSemMenuVis(false);\n    }\n\n    // render the semester menu\n    if ((plan[sem_index].year === \"Pool of Courses\") || (plan[sem_index].year === \"Pool of Courses\")) {\n        return(\n            <Modal show={semMenuVis} onHide = {hide}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add Course to Semester</Modal.Title>\n                </Modal.Header>\n    \n                <Modal.Body>\n                    <Col>\n                        <Button variant=\"success\" onClick={() => setPlanViewer()}>Add a course</Button>\n                    </Col>\n                    <Col>\n                        <Button variant=\"danger\" onClick={() => clearSemester()}>Delete all courses from semester</Button>\n                    </Col>\n                    <Col>\n                        <Button disabled variant=\"danger\" onClick={() => deleteSemester()}>Delete semester</Button>\n                    </Col>\n                </Modal.Body>\n            </Modal>\n        );\n    } else {\n        return(\n            <Modal show={semMenuVis} onHide = {hide}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add Course to Semester</Modal.Title>\n                </Modal.Header>\n    \n                <Modal.Body>\n                    <Col>\n                        <Button variant=\"success\" onClick={() => setPlanViewer()}>Add a course</Button>\n                    </Col>\n                    <Col>\n                        <Button variant=\"danger\" onClick={() => clearSemester()}>Delete all courses from semester</Button>\n                    </Col>\n                    <Col>\n                        <Button variant=\"danger\" onClick={() => deleteSemester()}>Delete semester</Button>\n                    </Col>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","import { Table } from \"react-bootstrap\";\nimport { Course } from \"../interfaces/course\";\nimport { Semester } from \"../interfaces/semester\";\nimport { CourseViewer } from \"./CourseViewer\";\nimport React, { useState } from \"react\";\nimport { SemesterMenu } from \"./SemesterMenu\";\n\nexport function SemesterTable({sem_index, plan, setPlan}:\n    {sem_index: number;\n    plan: Semester[];\n    setPlan: (plan: Semester[])=>void}):\n    JSX.Element{\n\n    const [dotsStyle, setDotsStyle] = useState({display: \"none\"});\n    const [changePromptVis, setChangePromptVis] = useState<boolean>(false);\n\n    if ((plan[sem_index].year === \"Pool of Courses\") || (plan[sem_index].semester === \"Pool of Courses\")) {\n        return (\n            <div className = \"SemesterTable\">\n                <table // Citation: https://stackoverflow.com/questions/61126014/how-to-show-button-while-hover-over-box-using-react\n                    onMouseEnter={() => {\n                        setDotsStyle({display: \"block\"});\n                    }}\n                    onMouseLeave={() => {\n                        setDotsStyle({display: \"none\"});\n                    }} className=\"SemesterHeader\">\n                    <td className = \"split\">\n                        <strong className=\"poolLabel\">{plan[sem_index].semester}</strong>\n                        <button className = \"dotButton\" style = {dotsStyle} onClick = {()=>setChangePromptVis(true)}>\n                            <div className = \"dot\"></div>\n                            <div className = \"dot\"></div>\n                            <div className = \"dot\"></div>\n                        </button>\n                    </td>\n                </table>\n                <SemesterMenu sem_index={sem_index} plan={plan} setPlan={setPlan} semMenuVis={changePromptVis} setSemMenuVis={setChangePromptVis}></SemesterMenu>\n    \n                <Table striped={true} bordered>\n                    <thead>\n                        <tr>\n                            <th>\n                                Course Number\n                            </th>\n                            <th>\n                                Course Name\n                            </th>\n                            <th>\n                                Credits\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {plan[sem_index].courses.map((c:Course, index:number) => { \n                            return (\n                                <CourseViewer key={index} index={index} sem_index={sem_index} plan={plan} setPlan={setPlan}></CourseViewer>\n                            );\n                        }\n                        )}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    } else {\n        return (\n            <div className = \"SemesterTable\">\n                <table // Citation: https://stackoverflow.com/questions/61126014/how-to-show-button-while-hover-over-box-using-react\n                    onMouseEnter={() => {\n                        setDotsStyle({display: \"block\"});\n                    }}\n                    onMouseLeave={() => {\n                        setDotsStyle({display: \"none\"});\n                    }} className=\"SemesterHeader\">\n                    <td className=\"yearLabel\">\n                        <strong>{plan[sem_index].year}</strong>\n                    </td>\n                    <td className = \"split\">\n                        <strong className=\"semLabel\">{plan[sem_index].semester}</strong>\n                        <button className = \"dotButton\" style = {dotsStyle} onClick = {()=>setChangePromptVis(true)}>\n                            <div className = \"dot\"></div>\n                            <div className = \"dot\"></div>\n                            <div className = \"dot\"></div>\n                        </button>\n                    </td>\n                </table>\n                <SemesterMenu sem_index={sem_index} plan={plan} setPlan={setPlan} semMenuVis={changePromptVis} setSemMenuVis={setChangePromptVis}></SemesterMenu>\n    \n                <Table striped={true} bordered>\n                    <thead>\n                        <tr>\n                            <th>\n                                Course Number\n                            </th>\n                            <th>\n                                Course Name\n                            </th>\n                            <th>\n                                Credits\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {plan[sem_index].courses.map((c:Course, index:number) => { \n                            return (\n                                <CourseViewer key={index} index={index} sem_index={sem_index} plan={plan} setPlan={setPlan}></CourseViewer>\n                            );\n                        }\n                        )}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n    \n}","import { Semester } from \"../interfaces/semester\";\nimport { SemesterTable } from \"./SemesterTable\";\nimport React from \"react\";\n\nexport function PlanViewer({plan, setPlan}:\n    {plan: Semester[];\n    setPlan: (plan: Semester[])=>void}\n):JSX.Element{\n    \n    return(\n        <div>\n            {plan.map((s:Semester, index:number) =>{\n                if(index%2 === 0 && index!=plan.length-1){\n                    return(\n                        <div className=\"YearTable\" key={index}>\n                            <table className=\"YearTable\">\n                                <tr>\n                                    <td className=\"Fall\">\n                                        <SemesterTable sem_index={index} plan={plan} setPlan={setPlan}></SemesterTable>\n                                    </td>\n                                    <td className=\"Spring\">\n                                        <SemesterTable sem_index={index+1} plan={plan} setPlan={setPlan}></SemesterTable>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    );\n                }\n                if(index%2 === 0 && index===plan.length-1){\n                    return(\n                        <div className=\"YearTable\" key={index}>\n                            <table className=\"YearTable\">\n                                <tr>\n                                    <td className=\"Fall\">\n                                        <SemesterTable sem_index={index} plan={plan} setPlan={setPlan}></SemesterTable>\n                                    </td>\n                                    <td className=\"Spring\">\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    );\n                }\n            })}\n        </div>\n    );\n}","import React, { useState } from \"react\";\nimport {Modal, Table} from \"react-bootstrap\";\nimport { Semester } from \"../interfaces/semester\";\nimport RequiredCourses from \"../assets/RequiredCoreCourses.json\";\nimport { Course } from \"../interfaces/course\";\nimport ArtsHumanities from \"../assets/ArtsHumanities.json\";\nimport HistoryCultural from \"../assets/HistoryCultural.json\";\nimport SocialBehavioral from \"../assets/SocialBehavioral.json\";\nimport Tech from \"../assets/Tech.json\";\nimport COEupper from \"../assets/COEupper.json\";\nimport CISCprereqs from \"../assets/CISCprereqs.json\";\nimport { Prereq } from \"../interfaces/prereq\";\n\nexport function AuditModal({plan, visible, setVisible}:\n    {plan: Semester[];\n    visible: boolean;\n    setVisible: (visible: boolean)=>void\n    }): JSX.Element{\n    const hide = () => setVisible(false);\n\n    //Missing Core Courses\n    const [missingCore, setMissingCore] = useState<Course[]>([]);\n\n    //CISC electives\n    const [CISCelectives, setCISCelectives] = useState<Course[]>([]);\n\n    //Breadth electives\n    const [breadth, setBreadth] = useState<Course[]>([]);\n\n    //Get require courses for checking\n    const reqCourses: Course[] = RequiredCourses as Course[];\n\n    //Prerequisite rules\n    const prereqs: Prereq[] = CISCprereqs as Prereq[];\n    const [rules_violated, set_rules_violated] = useState<boolean[][]>([]);\n    const [missing_prereqs, set_missing_prereqs] = useState<boolean>(false);\n    \n    //Raw list of all courses (will be helpful for some checks)\n    const allCourses: Course[] = [];\n    for (let i = 0; i<plan.length; i++){\n        for (let j = 0; j<plan[i].courses.length; j++){\n            allCourses.push(plan[i].courses[j]);\n        }\n    }\n\n    //Matrix of the plan, only need the numbers (for prereq checks)\n    const plan_nums: string[][] = [[]];\n    for (let i = 0; i<plan.length; i++){\n        const sem_nums: string[] = [];\n        for (let j = 0; j<plan[i].courses.length; j++){\n            sem_nums.push(plan[i].courses[j].number);\n        }\n        plan_nums.push(sem_nums);\n    }\n\n    \n    //Checks for core courses\n    function checkCore():void{\n        const temp_missing: Course[] = [];\n        for(let i = 0; i<reqCourses.length; i++){\n            for(let j = 0; j<allCourses.length; j++){\n                if(allCourses[j].number === reqCourses[i].number \n                    && allCourses[j].name === reqCourses[i].name \n                    && allCourses[j].credits === reqCourses[i].credits){\n                    break;\n                }\n                if(j === allCourses.length-1){\n                    temp_missing.push(reqCourses[i]);\n                }\n            }            \n        }\n        setMissingCore(temp_missing);\n    }\n\n    //Check for CISC electives\n    // 6 required that are not core course\n    function checkCISCElec():void{\n        const temp_CISCelectives: Course[] = [];\n        for (let i = 0; i<allCourses.length; i++){\n            if(allCourses[i].number.startsWith(\"CISC\")){\n                for (let j = 0; j<reqCourses.length; j++){\n                    if(allCourses[i].name == reqCourses[j].name){\n                        break;\n                    }\n                    if(j === reqCourses.length-1){\n                        temp_CISCelectives.push(allCourses[i]);\n                    }\n                }\n            }\n        }\n        setCISCelectives(temp_CISCelectives);\n    }\n\n    //Check for breadths\n    function checkBreadths():void{\n        const temp_breadth: Course[] = [];\n\n        //Check general breadth\n        temp_breadth.push(isIn(allCourses,ArtsHumanities));\n        temp_breadth.push(isIn(allCourses,HistoryCultural));\n        temp_breadth.push(isIn(allCourses,SocialBehavioral));\n        temp_breadth.push(isIn(allCourses,Tech));\n\n        //COE additional breadths\n        const temp_additional: Course[] = isInAll(allCourses,COEupper);\n        //only one under 300 allowed\n        let used_lower = false;\n        for (let i = 0; i<temp_additional.length; i++){\n            //Upper?\n            const upper:boolean = temp_additional[i].number.slice(-3,-2) == \"3\" || temp_additional[i].number.slice(-3,-2) == \"4\";\n            //Is it already being used?\n            if(isIn(temp_breadth,[temp_additional[i].number]).number){\n                continue;\n            }else{\n                //Is it a second lower?\n                if (!upper && used_lower){\n                    continue;\n                }else{\n                    //Add it to the list\n                    temp_breadth.push(temp_additional[i]);\n                    if (!upper){\n                        used_lower = true;\n                    }\n                    //Is this our third? (only need 3)\n                    if (temp_breadth.length == 7){\n                        break;\n                    }\n                }\n            }\n        }\n        //if no additional breadth\n        if(!temp_additional[0].number){\n            temp_breadth.push({number:\"\", name:\"\", credits:0});\n        }\n\n        setBreadth(temp_breadth);\n    }\n\n    function checkPrereqs():void{\n        //check each rule from the json file\n        const rules_violated_temp: boolean[][] = [];\n        for (let i = 0; i<prereqs.length; i++){\n            const each_prereq: boolean[] = [];\n            let semester_course_occurs = -1;\n            //Find the course\n            for (let j = 0; j<plan.length; j++){\n                if (isIn(plan[j].courses, [prereqs[i].course]).number){\n                    //Found it!\n                    semester_course_occurs = j;\n                    break;\n                }\n                //If it's not here, the rule can't be violated, so it's false for each course\n                if (j === plan.length-1){\n                    for (let k = 0; k<prereqs[i].prereqs.length; k++){\n                        each_prereq.push(false);\n                    }\n                    break;\n                }\n            }\n            //We found it, gotta see if the rules are followed\n            for (let j = 0; j<prereqs[i].prereqs.length; j++){\n                for (let k = 0; k<semester_course_occurs; k++){\n                    if(isIn(plan[k].courses, [prereqs[i].prereqs[j]]).number){\n                        //Prerequisite rule is satisfied\n                        each_prereq.push(false);\n                        break;\n                    }\n                    //Prereq not satisfied\n                    if (k === semester_course_occurs-1){\n                        each_prereq.push(true);\n                    }\n                }\n            }\n            //Add the results for this course\n            rules_violated_temp.push(each_prereq);\n        }\n        //Are any prereqs missing? (For rendering \"none missing\" message)\n        let missing_prereqs_temp = false;\n        for (let i = 0; i<rules_violated_temp.length; i++){\n            for (let j = 0; j<rules_violated_temp[i].length; j++){\n                if (rules_violated_temp[i][j]){\n                    missing_prereqs_temp = true;\n                    break;\n                }\n            }\n            if (missing_prereqs_temp){\n                break;\n            }\n        }\n        //Update usestate\n        set_missing_prereqs(missing_prereqs_temp);\n        set_rules_violated(rules_violated_temp);\n    }\n\n    //Does the list of courses contain any of the numbers in the list of course numbers?\n    //If so, return the course of the first time it does\n    //If not, returns a 0 credit, empty course\n    function isIn(courses:Course[], nums:string[]):Course{\n        for (let i = 0; i<courses.length; i++){\n            for (let j = 0; j<nums.length; j++){\n                //Find first one that satisfies\n                if (courses[i].number === nums[j]){\n                    return courses[i];\n                }\n            }\n        }\n        return {number:\"\", name:\"\", credits:0};\n    }\n\n    //Same as isIn, but returns all\n    function isInAll(courses:Course[], nums:string[]):Course[]{\n        const temp_courses:Course[] = [];\n        for (let i = 0; i<courses.length; i++){\n            for (let j = 0; j<nums.length; j++){\n                //Does it satisfy?\n                if (courses[i].number === nums[j]){\n                    temp_courses.push(courses[i]);\n                }\n            }\n        }\n        //add the empty course if nothing matches\n        if (temp_courses.length === 0){\n            temp_courses.push({number:\"\", name:\"\", credits:0});\n        }\n        return temp_courses;\n    }\n\n    //Only do the checks once to avoid inf loop\n    const [checkRules, setCheckRules] = useState<boolean>(true);\n    if (!visible && !checkRules){\n        setCheckRules(true);\n    }else if(visible && checkRules){\n        checkCore();\n        checkCISCElec();\n        checkBreadths();\n        checkPrereqs();\n        setCheckRules(false);\n    }\n\n    return(\n        <Modal size=\"lg\" show={visible} onHide = {hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Schedule Audit</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div className=\"AuditLabel\">\n                    <strong className=\"AuditLabel\">Core Courses Missing</strong>\n                </div>\n                {missingCore.length?\n                    <Table className=\"AuditTable\" striped={true} bordered>\n                        <thead>\n                            <tr>\n                                <th className=\"text-center\">\n                                    Course Number\n                                </th>\n                                <th className=\"text-center\">\n                                    Course Name\n                                </th>\n                                <th className=\"text-center\">\n                                    Credits\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {missingCore.map((c:Course, index:number) => { \n                                return (\n                                    <tr key={index}>\n                                        <td className=\"text-center\">{c.number}</td>\n                                        <td className=\"text-center\">{c.name}</td>\n                                        <td className=\"text-center\">{c.credits}</td>\n                                    </tr>\n                                );\n                            }\n                            )}\n                        </tbody>\n                    </Table>: <div className=\"BasicCenter\">None</div>\n                }\n                <div>\n                    <div className=\"AuditLabel\">\n                        <strong className=\"AuditLabel\">CISC Prerequisites Missing</strong>\n                    </div>\n                    {prereqs.map((p:Prereq, index0:number) => {\n                        return(\n                            p.prereqs.map((req:string, index1:number) => {\n                                if (rules_violated.length){\n                                    if(rules_violated[index0][index1]){\n                                        return(\n                                            <div className=\"BasicCenter\">\n                                                {req} is a prerequisite for {p.course}\n                                            </div>\n                                        );\n                                    }\n                                    //If no rules are violated\n                                    if(!missing_prereqs && index0===prereqs.length-1 && index1 ===p.prereqs.length-1){\n                                        return(\n                                            <div className=\"BasicCenter\">\n                                                None\n                                            </div>\n                                        );\n                                    }\n                                }\n                            })\n                        );\n                    })\n                    }\n                </div>\n                <div className=\"AuditLabel\">\n                    <strong className=\"AuditLabel\">CISC Electives (18 credits required)</strong>\n                </div>\n                <Table className=\"AuditTable\" striped={true} bordered>\n                    <thead>\n                        <tr>\n                            <th className=\"text-center\">\n                                Course Number\n                            </th>\n                            <th className=\"text-center\">\n                                Course Name\n                            </th>\n                            <th className=\"text-center\">\n                                Credits\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {CISCelectives.map((c:Course, index:number) => { \n                            return (\n                                <tr key={index}>\n                                    <td className=\"text-center\">{c.number}</td>\n                                    <td className=\"text-center\">{c.name}</td>\n                                    <td className=\"text-center\">{c.credits}</td>\n                                </tr>\n                            );\n                        }\n                        )}\n                    </tbody>\n                </Table>\n                <div className=\"AuditLabel\">\n                    <strong className=\"AuditLabel\">Breadth Electives</strong>\n                </div>\n                <div className=\"AuditLabel\">\n                    <strong className=\"AuditLabel\">Arts and Humanities (3 credits required)</strong>\n                </div>\n                <Table className=\"AuditTable\" striped={true} bordered>\n                    <thead>\n                        <tr>\n                            <th className=\"text-center\">\n                                Course Number\n                            </th>\n                            <th className=\"text-center\">\n                                Course Name\n                            </th>\n                            <th className=\"text-center\">\n                                Credits\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {breadth[0]?\n                            <tr>\n                                <td className=\"text-center\">{breadth[0].number}</td>\n                                <td className=\"text-center\">{breadth[0].name}</td>\n                                <td className=\"text-center\">{breadth[0].credits}</td>\n                            </tr>\n                            :<tr></tr>}\n                    </tbody>\n                </Table>\n                <div className=\"AuditLabel\">\n                    <strong className=\"AuditLabel\">History and Cultural Change (3 credits required)</strong>\n                </div>\n                <Table className=\"AuditTable\" striped={true} bordered>\n                    <thead>\n                        <tr>\n                            <th className=\"text-center\">\n                                Course Number\n                            </th>\n                            <th className=\"text-center\">\n                                Course Name\n                            </th>\n                            <th className=\"text-center\">\n                                Credits\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {breadth[1]?\n                            <tr>\n                                <td className=\"text-center\">{breadth[1].number}</td>\n                                <td className=\"text-center\">{breadth[1].name}</td>\n                                <td className=\"text-center\">{breadth[1].credits}</td>\n                            </tr>\n                            :<tr></tr>}\n                    </tbody>\n                </Table>\n                <div className=\"AuditLabel\">\n                    <strong className=\"AuditLabel\">Social and Behavioral Science (3 credits required)</strong>\n                </div>\n                <Table className=\"AuditTable\" striped={true} bordered>\n                    <thead>\n                        <tr>\n                            <th className=\"text-center\">\n                                Course Number\n                            </th>\n                            <th className=\"text-center\">\n                                Course Name\n                            </th>\n                            <th className=\"text-center\">\n                                Credits\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {breadth[2]?\n                            <tr>\n                                <td className=\"text-center\">{breadth[2].number}</td>\n                                <td className=\"text-center\">{breadth[2].name}</td>\n                                <td className=\"text-center\">{breadth[2].credits}</td>\n                            </tr>\n                            :<tr></tr>}\n                    </tbody>\n                </Table>\n                <div className=\"AuditLabel\">\n                    <strong className=\"AuditLabel\">Mathematics, Natural Sciences, and Technology (3 credits required)</strong>\n                </div>\n                <Table className=\"AuditTable\" striped={true} bordered>\n                    <thead>\n                        <tr>\n                            <th className=\"text-center\">\n                                Course Number\n                            </th>\n                            <th className=\"text-center\">\n                                Course Name\n                            </th>\n                            <th className=\"text-center\">\n                                Credits\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {breadth[3]?\n                            <tr>\n                                <td className=\"text-center\">{breadth[3].number}</td>\n                                <td className=\"text-center\">{breadth[3].name}</td>\n                                <td className=\"text-center\">{breadth[3].credits}</td>\n                            </tr>\n                            :<tr></tr>}\n                    </tbody>\n                </Table>\n                <div className=\"AuditLabel\">\n                    <strong className=\"AuditLabel\">COE Additional Breadth (9 credits, 6 upper)</strong>\n                </div>\n                <Table className=\"AuditTable\" striped={true} bordered>\n                    <thead>\n                        <tr>\n                            <th className=\"text-center\">\n                                Course Number\n                            </th>\n                            <th className=\"text-center\">\n                                Course Name\n                            </th>\n                            <th className=\"text-center\">\n                                Credits\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {breadth.slice(4).map((c:Course, index:number) => { \n                            return (\n                                <tr key={index}>\n                                    <td className=\"text-center\">{c.number}</td>\n                                    <td className=\"text-center\">{c.name}</td>\n                                    <td className=\"text-center\">{c.credits}</td>\n                                </tr>\n                            );\n                        })\n                        }\n                    </tbody>\n                </Table>\n            </Modal.Body>\n        </Modal>\n    );\n}","import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport COURSES from \"./assets/courses.json\";\nimport { Semester, SemesterType, YearType } from \"./interfaces/semester\";\nimport { Course } from \"./interfaces/course\";\nimport { Welcome } from \"./components/Welcome\";\nimport { PlanViewer } from \"./components/PlanViewer\";\nimport { AuditModal } from \"./components/AuditModal\";\nfunction App(): JSX.Element {\n    const [plan, setPlan] = useState<Semester[]>(COURSES as Semester[]);\n    const [visible, setVisible] = useState<boolean>(true);\n    const [auditVis, setAuditVis] = useState<boolean>(false);\n    function addSemester(){\n        let yearType = YearType.FirstYear;\n        let semesterType = SemesterType.Fall;\n        if(plan.length === 0){\n            yearType = YearType.FirstYear;\n            semesterType = SemesterType.Fall;\n        }else if (plan[plan.length - 1].semester === \"Fall\") {\n            yearType = plan[plan.length - 1].year;\n            semesterType = SemesterType.Spring;\n        }else{\n            semesterType = SemesterType.Fall;\n            if(plan[plan.length - 1].year === \"First Year\"){\n                yearType = YearType.SecondYear;\n            }else if(plan[plan.length - 1].year === \"Second Year\"){\n                yearType = YearType.ThirdYear;\n            }else if(plan[plan.length - 1].year === \"Third Year\"){\n                yearType = YearType.FourthYear;\n            }\n        }\n        const newSemester = {year: yearType, semester: semesterType, courses: []};\n        setPlan([...plan, newSemester]);\n    }\n   \n    function showAudit():void{\n        setAuditVis(true);\n    }\n    function RemoveAllSemesters():void{\n        setPlan(plan.filter(s => s.year === \"Pool of Courses\"));\n    }\n    function download(){\n        function semCourses(c: Course[]){\n            const semCourse = c.map((q: Course) => q.number + \",\" + q.name + \",\" + q.credits);\n            return semCourse;\n        }\n        const csvContent = \"data:text/csv;charset=utf-8,\" + \"Year,\" + \"Semester,\" + \"ID,\" + \"Title,\" + \"Credits,\" + plan.map((s: Semester) => \"\\n\" + s.year + \",\" + s.semester + \",\" + semCourses(s.courses));\n        const hiddenElement = document.createElement(\"a\");  \n        hiddenElement.href = encodeURI(csvContent);  \n        hiddenElement.target = \"_blank\";\n        hiddenElement.download = \"Schedule.csv\";  \n        hiddenElement.click();  \n    }\n    useEffect(() => {\n        if(sessionStorage.getItem(\"localplan\") != null){\n            const json = sessionStorage.getItem(\"localplan\");\n            const savedPlan = JSON.parse(json || \"\");\n            if(savedPlan){\n                setPlan(savedPlan);\n            }\n        }\n    }, []);\n    useEffect(() => {\n        if(plan){\n            const json = JSON.stringify(plan);\n            sessionStorage.setItem(\"localplan\", json);\n        }\n    }, [plan]);\n    return (\n        <div className=\"App\">\n            <p>UD CIS Scheduler</p>\n            <Button onClick = {addSemester}>Add Semester</Button>\n            <Button onClick= {RemoveAllSemesters}>Remove All Semesters</Button>\n            <Button onClick= {showAudit}>Audit</Button>\n            <Button onClick= {download}>Download</Button>\n            <PlanViewer plan={plan} setPlan={setPlan}></PlanViewer>\n            <Welcome visible = {visible} setVisible = {setVisible}></Welcome>\n            <AuditModal plan={plan} visible={auditVis} setVisible={setAuditVis}></AuditModal>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}