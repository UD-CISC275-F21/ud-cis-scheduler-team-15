{"version":3,"sources":["interfaces/semester.ts","components/Welcome.tsx","components/ChangeData.tsx","components/CourseViewer.tsx","components/SemesterMenu.tsx","components/SemesterTable.tsx","components/PlanViewer.tsx","components/AuditModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["YearType","SemesterType","Welcome","visible","setVisible","Modal","show","onHide","Header","closeButton","Title","Body","ChangeData","index","sem_index","plan","setPlan","hide","update","numberHTML","document","getElementById","nameHTML","creditsHTML","c","temp_sem","courses","temp_plan","setCourse","number","value","name","credits","Number","className","id","type","defaultValue","onClick","temp_courses","splice","ReactDOM","render","StrictMode","del","CourseViewer","key","useState","display","dotsStyle","setDotsStyle","changePromptVis","setChangePromptVis","onMouseEnter","onMouseLeave","style","SemesterMenu","semMenuVis","setSemMenuVis","Col","Button","variant","map","s","filter","SemesterTable","year","semester","Table","striped","bordered","PlanViewer","length","AuditModal","missingCore","setMissingCore","reqCourses","RequiredCourses","allCourses","i","j","push","checkRules","setCheckRules","console","log","temp_missing","checkCore","size","App","COURSES","auditVis","setAuditVis","yearType","FirstYear","semesterType","Fall","Spring","SecondYear","ThirdYear","FourthYear","newSemester","csvContent","q","write","hiddenElement","createElement","href","encodeURI","target","download","click","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.19552527.chunk.js","sourcesContent":["import { Course } from \"./course\";\n\nexport enum YearType {\n    FirstYear = \"First Year\",\n    SecondYear = \"Second Year\",\n    ThirdYear = \"Third Year\",\n    FourthYear = \"Fourth Year\"\n}\n\nexport enum SemesterType {\n    Fall = \"Fall\",\n    Spring = \"Spring\"\n}\n\nexport interface Semester {\n    year: YearType\n    semester: SemesterType\n    courses: Course[]\n}","import React from \"react\";\nimport {Modal} from \"react-bootstrap\";\nexport function Welcome({visible, setVisible}: {visible: boolean, setVisible: (b: boolean) => void}): JSX.Element {\n    const hide = () => setVisible(false);\n    \n    return (\n        <Modal show={visible} onHide = {hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Welcome!</Modal.Title>\n            </Modal.Header>\n      \n            <Modal.Body>\n                <p>This web app is designed to help you plan out your course schedule in order to complete your CIS Schedule.</p>\n            </Modal.Body>\n        </Modal>\n    );\n}","\nimport React from \"react\";\nimport {Modal} from \"react-bootstrap\";\nimport ReactDOM from \"react-dom\";\nimport App from \"../App\";\nimport { Course } from \"../interfaces/course\";\nimport { Semester } from \"../interfaces/semester\";\nexport function ChangeData({index, sem_index, plan, setPlan, visible, setVisible}:\n    {index: number;\n    sem_index:number;\n    plan: Semester[];\n    setPlan: (plan: Semester[])=>void;\n    visible: boolean;\n    setVisible: (visible: boolean)=>void;\n    }): JSX.Element{\n\n    function setCourse(c: Course):void{\n        const temp_sem: Semester = plan[sem_index];\n        plan[sem_index].courses[index] = c;\n        const temp_plan: Semester[] = plan;\n        temp_plan[sem_index] = temp_sem;\n        setPlan(temp_plan);\n    }\n\n    const hide = () => setVisible(false);\n\n    function update():void{\n        const numberHTML = document.getElementById(\"numberUpdate\") as HTMLInputElement;\n        const nameHTML  = document.getElementById(\"nameUpdate\") as HTMLInputElement;\n        const creditsHTML = document.getElementById(\"creditsUpdate\") as HTMLInputElement;\n        setCourse({number:numberHTML.value, name: nameHTML.value, credits: Number(creditsHTML.value)});\n        hide();\n    }\n\n    function del():void{\n        const temp_courses: Course[]= plan[sem_index].courses;\n        temp_courses.splice(index,1);\n        const temp_sem: Semester = plan[sem_index];\n        temp_sem.courses = temp_courses;\n        const temp_plan = plan;\n        temp_plan[sem_index] = temp_sem;\n        setPlan(temp_plan);    \n        hide();\n        //Rerender everything!!!\n        ReactDOM.render(\n            <React.StrictMode>\n                <App />\n            </React.StrictMode>,\n            document.getElementById(\"root\")\n        );    \n    }\n\n    return(\n        <Modal show={visible} onHide = {hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Course Info</Modal.Title>\n            </Modal.Header>\n    \n            <Modal.Body>\n                <div className=\"dataEditorLabel\">\n                    <strong>Edit Course Number:</strong>\n                    <input className=\"dataInput\" id=\"numberUpdate\" type=\"text\" defaultValue={plan[sem_index].courses[index].number}></input>\n                </div>\n                <div className=\"dataEditorLabel\">\n                    <strong>Edit Course Name:</strong>\n                    <input className=\"dataInput\" id=\"nameUpdate\" defaultValue={plan[sem_index].courses[index].name}></input>\n                </div>\n                <div className=\"dataEditorLabel\">\n                    <strong>Edit Credits:</strong>\n                    <div>\n                        <input className=\"dataInputCred\" id=\"creditsUpdate\" type=\"number\" defaultValue={plan[sem_index].courses[index].credits}></input>\n                    </div>\n                </div>\n                <button className=\"saveChanges\" onClick={() => update()}>Save Changes</button>\n                <button className=\"deleteCourse\" onClick={() => del()}>Delete Course</button>\n            </Modal.Body>\n        </Modal>\n    );     \n}","import React, { useState } from \"react\";\nimport { Semester } from \"../interfaces/semester\";\nimport { ChangeData } from \"./ChangeData\";\n\nexport function CourseViewer({key, index, sem_index, plan, setPlan}: \n    {key: number\n    index: number;\n    sem_index: number;\n    plan: Semester[];\n    setPlan: (plan: Semester[])=> void;\n    }\n    \n): JSX.Element {\n    const [dotsStyle, setDotsStyle] = useState({display: \"none\"});\n    const [changePromptVis, setChangePromptVis] = useState<boolean>(false);\n    \n    return (\n        <tr key={key}\n        // Citation: https://stackoverflow.com/questions/61126014/how-to-show-button-while-hover-over-box-using-react\n            onMouseEnter={() => {\n                setDotsStyle({display: \"block\"});\n            }}\n            onMouseLeave={() => {\n                setDotsStyle({display: \"none\"});\n            }}>\n            <td className=\"courseNum\">{plan[sem_index].courses[index].number}</td>\n            <td className=\"courseName\">{plan[sem_index].courses[index].name}</td>\n            <td className = \"split\">\n                <div className = \"credits\">{plan[sem_index].courses[index].credits}</div>\n                <button className = \"dotButton\" style = {dotsStyle} onClick = {()=>setChangePromptVis(true)}>\n                    <div className = \"dot\"></div>\n                    <div className = \"dot\"></div>\n                    <div className = \"dot\"></div>\n                </button>\n            </td>\n            <ChangeData index={index} sem_index={sem_index} plan={plan} setPlan={setPlan} visible={changePromptVis} setVisible={setChangePromptVis}></ChangeData>\n        </tr>\n    );\n}","import React from \"react\";\nimport { Semester } from \"../interfaces/semester\";\nimport { Modal, Col } from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\n/*import { updateLanguageServiceSourceFile } from \"typescript\";*/\n\nexport function SemesterMenu({sem_index, plan, setPlan, semMenuVis, setSemMenuVis}:\n    {sem_index: number;\n    plan: Semester[],\n    setPlan: (plan: Semester[])=>void,\n    semMenuVis: boolean,\n    setSemMenuVis: (semMenuVis: boolean)=>void}\n):JSX.Element{\n\n    const hide = () => setSemMenuVis(false);\n\n    // clears a semester's courses by replacing it with an empty semester\n    function clearSemester():void{\n        setPlan(plan.map((s:Semester) => {\n            if (s === plan[sem_index]) {\n                return {...s, courses: []};\n            } else {\n                return {...s};\n            }\n        }));\n        setSemMenuVis(false);\n    }\n\n    // deletes a semester by filtering it out of the plan\n    function deleteSemester():void{\n        setPlan(plan.filter(s => s != plan[sem_index]));\n        setSemMenuVis(false);\n    }\n\n    // makes a copy of the old plan but with a new course in the selected semester\n    function setPlanViewer():void{\n        setPlan(plan.map((s:Semester) => {\n            if (s === plan[sem_index]) {\n                return {...s, courses: [...plan[sem_index].courses, {number: \"\", name: \"\", credits: 0}]};\n            } else {\n                return {...s};\n            }\n        }));\n        setSemMenuVis(false);\n    }\n\n    // render the semester menu\n    return(\n        <Modal show={semMenuVis} onHide = {hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Course to Semester</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Col>\n                    <Button variant=\"success\" onClick={() => setPlanViewer()}>Add a course</Button>\n                </Col>\n                <Col>\n                    <Button variant=\"danger\" onClick={() => clearSemester()}>Delete all courses from semester</Button>\n                </Col>\n                <Col>\n                    <Button variant=\"danger\" onClick={() => deleteSemester()}>Delete semester</Button>\n                </Col>\n            </Modal.Body>\n        </Modal>\n    );\n}\n","import { Table } from \"react-bootstrap\";\nimport { Course } from \"../interfaces/course\";\nimport { Semester } from \"../interfaces/semester\";\nimport { CourseViewer } from \"./CourseViewer\";\nimport React, { useState } from \"react\";\nimport { SemesterMenu } from \"./SemesterMenu\";\n\nexport function SemesterTable({sem_index, plan, setPlan}:\n    {sem_index: number;\n    plan: Semester[];\n    setPlan: (plan: Semester[])=>void}):\n    JSX.Element{\n\n    const [dotsStyle, setDotsStyle] = useState({display: \"none\"});\n    const [changePromptVis, setChangePromptVis] = useState<boolean>(false);\n\n    return (\n        <div className = \"SemesterTable\">\n            <table // Citation: https://stackoverflow.com/questions/61126014/how-to-show-button-while-hover-over-box-using-react\n                onMouseEnter={() => {\n                    setDotsStyle({display: \"block\"});\n                }}\n                onMouseLeave={() => {\n                    setDotsStyle({display: \"none\"});\n                }} className=\"SemesterHeader\">\n                <td className=\"yearLabel\">\n                    <strong>{plan[sem_index].year}</strong>\n                </td>\n                <td className = \"split\">\n                    <strong className=\"semLabel\">{plan[sem_index].semester}</strong>\n                    <button className = \"dotButton\" style = {dotsStyle} onClick = {()=>setChangePromptVis(true)}>\n                        <div className = \"dot\"></div>\n                        <div className = \"dot\"></div>\n                        <div className = \"dot\"></div>\n                    </button>\n                </td>\n            </table>\n            <SemesterMenu sem_index={sem_index} plan={plan} setPlan={setPlan} semMenuVis={changePromptVis} setSemMenuVis={setChangePromptVis}></SemesterMenu>\n\n            <Table striped={true} bordered>\n                <thead>\n                    <tr>\n                        <th>\n                            Course Number\n                        </th>\n                        <th>\n                            Course Name\n                        </th>\n                        <th>\n                            Credits\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {plan[sem_index].courses.map((c:Course, index:number) => { \n                        return (\n                            <CourseViewer key={index} index={index} sem_index={sem_index} plan={plan} setPlan={setPlan}></CourseViewer>\n                        );\n                    }\n                    )}\n                </tbody>\n            </Table>\n        </div>\n    );\n}","import { Semester } from \"../interfaces/semester\";\nimport { SemesterTable } from \"./SemesterTable\";\nimport React from \"react\";\n\nexport function PlanViewer({plan, setPlan}:\n    {plan: Semester[];\n    setPlan: (plan: Semester[])=>void}\n):JSX.Element{\n    \n    return(\n        <div>\n            {plan.map((s:Semester, index:number) =>{\n                if(index%2 === 0 && index!=plan.length-1){\n                    return(\n                        <div className=\"YearTable\" key={index}>\n                            <table className=\"YearTable\">\n                                <tr>\n                                    <td className=\"Fall\">\n                                        <SemesterTable sem_index={index} plan={plan} setPlan={setPlan}></SemesterTable>\n                                    </td>\n                                    <td className=\"Spring\">\n                                        <SemesterTable sem_index={index+1} plan={plan} setPlan={setPlan}></SemesterTable>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    );\n                }\n                if(index%2 === 0 && index===plan.length-1){\n                    return(\n                        <div className=\"YearTable\" key={index}>\n                            <table className=\"YearTable\">\n                                <tr>\n                                    <td className=\"Fall\">\n                                        <SemesterTable sem_index={index} plan={plan} setPlan={setPlan}></SemesterTable>\n                                    </td>\n                                    <td className=\"Spring\">\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    );\n                }\n            })}\n        </div>\n    );\n}","import React, { useState } from \"react\";\nimport {Modal, Table} from \"react-bootstrap\";\nimport { Semester } from \"../interfaces/semester\";\nimport RequiredCourses from \"../assets/RequiredCoreCourses.json\";\nimport { Course } from \"../interfaces/course\";\n\nexport function AuditModal({plan, visible, setVisible}:\n    {plan: Semester[];\n    visible: boolean;\n    setVisible: (visible: boolean)=>void\n    }): JSX.Element{\n    const hide = () => setVisible(false);\n\n    //Missing Core Courses\n    const [missingCore, setMissingCore] = useState<Course[]>([]);\n\n    //Get require courses for checking\n    const reqCourses: Course[] = RequiredCourses as Course[];\n    \n    //Raw list of all courses (will be helpful for some checks)\n    const allCourses: Course[] = [];\n    for (let i = 0; i<plan.length; i++){\n        for (let j = 0; j<plan[i].courses.length; j++){\n            allCourses.push(plan[i].courses[j]);\n        }\n    }\n    \n    //Checks for core courses\n    function checkCore():void{\n        console.log(\"CHECK\");\n        const temp_missing: Course[] = [];\n        for(let i = 0; i<reqCourses.length; i++){\n\n            for(let j = 0; j<allCourses.length; j++){\n                if(allCourses[j].number === reqCourses[i].number \n                    && allCourses[j].name === reqCourses[i].name \n                    && allCourses[j].credits === reqCourses[i].credits){\n                    break;\n                }\n                if(j === allCourses.length-1){\n                    temp_missing.push(reqCourses[i]);\n                }\n            }            \n        }\n        setMissingCore(temp_missing);\n    }\n\n    //Only do the checks once to avoid inf loop\n    const [checkRules, setCheckRules] = useState<boolean>(true);\n    if (!visible && !checkRules){\n        setCheckRules(true);\n    }else if(visible && checkRules){\n        checkCore();\n        setCheckRules(false);\n    }\n\n    return(\n        <Modal size=\"lg\" show={visible} onHide = {hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Schedule Audit</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <strong className=\"AuditLabel\">Core Courses Missing:</strong>\n                {missingCore.length?\n                    <Table className=\"AuditTable\" striped={true} bordered>\n                        <thead>\n                            <tr>\n                                <th className=\"text-center\">\n                                    Course Number\n                                </th>\n                                <th className=\"text-center\">\n                                    Course Name\n                                </th>\n                                <th className=\"text-center\">\n                                    Credits\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {missingCore.map((c:Course, index:number) => { \n                                return (\n                                    <tr key={index}>\n                                        <td className=\"text-center\">{c.number}</td>\n                                        <td className=\"text-center\">{c.name}</td>\n                                        <td className=\"text-center\">{c.credits}</td>\n                                    </tr>\n                                );\n                            }\n                            )}\n                        </tbody>\n                    </Table>: <div>None</div>\n                }\n            </Modal.Body>\n        </Modal>\n    );\n}","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport COURSES from \"./assets/courses.json\";\nimport { Semester, SemesterType, YearType } from \"./interfaces/semester\";\nimport { Course } from \"./interfaces/course\";\nimport { Welcome } from \"./components/Welcome\";\nimport { PlanViewer } from \"./components/PlanViewer\";\nimport { AuditModal } from \"./components/AuditModal\";\nfunction App(): JSX.Element {\n    const [plan, setPlan] = useState<Semester[]>(COURSES as Semester[]);\n    const [visible, setVisible] = useState<boolean>(true);\n    const [auditVis, setAuditVis] = useState<boolean>(false);\n    function addSemester(){\n        let yearType = YearType.FirstYear;\n        let semesterType = SemesterType.Fall;\n        if(plan.length === 0){\n            yearType = YearType.FirstYear;\n            semesterType = SemesterType.Fall;\n        }else if (plan[plan.length - 1].semester === \"Fall\") {\n            yearType = plan[plan.length - 1].year;\n            semesterType = SemesterType.Spring;\n        }else{\n            semesterType = SemesterType.Fall;\n            if(plan[plan.length - 1].year === \"First Year\"){\n                yearType = YearType.SecondYear;\n            }else if(plan[plan.length - 1].year === \"Second Year\"){\n                yearType = YearType.ThirdYear;\n            }else if(plan[plan.length - 1].year === \"Third Year\"){\n                yearType = YearType.FourthYear;\n            }\n        }\n        const newSemester = {year: yearType, semester: semesterType, courses: []};\n        setPlan([...plan, newSemester]);\n    }\n   \n    function showAudit():void{\n        setAuditVis(true);\n    }\n    function RemoveAllSemesters(){\n        setPlan([]);\n    }\n    function download(){\n        function semCourses(c: Course[]){\n            const semCourse = c.map((q: Course) => q.number + \",\" + q.name + \",\" + q.credits);\n            return semCourse;\n        }\n        const csvContent = \"data:text/csv;charset=utf-8,\"\n        + plan.map((s: Semester) => s.year + \",\" + s.semester + \",\" + semCourses(s.courses) + \"\\n\");\n        document.write(csvContent);\n        const hiddenElement = document.createElement(\"a\");  \n        hiddenElement.href = encodeURI(csvContent);  \n        hiddenElement.target = \"_blank\";\n        hiddenElement.download = \"Schedule.csv\";  \n        hiddenElement.click();  \n    }\n\n\n    return (\n        <div className=\"App\">\n            <p>UD CIS Scheduler</p>\n            <Button onClick = {addSemester}>Add Semester</Button>\n            <Button onClick= {RemoveAllSemesters}>Remove All Semesters</Button>\n            <Button onClick= {showAudit}>Audit</Button>\n            <Button onClick= {download}>Download</Button>\n            <PlanViewer plan={plan} setPlan={setPlan}></PlanViewer>\n            <Welcome visible = {visible} setVisible = {setVisible}></Welcome>\n            <AuditModal plan={plan} visible={auditVis} setVisible={setAuditVis}></AuditModal>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}